{
  "version": 3,
  "sources": ["../../gophergfx/src/math/Color.ts", "../../gophergfx/src/math/Vector2.ts", "../../gophergfx/src/math/MathUtils.ts", "../../gophergfx/src/core/Renderer.ts", "../../gophergfx/src/math/Vector3.ts", "../../gophergfx/src/math/Quaternion.ts", "../../gophergfx/src/math/Matrix4.ts", "../../gophergfx/src/core/Transform3.ts", "../../gophergfx/src/core/Camera.ts", "../../gophergfx/src/math/Matrix3.ts", "../../gophergfx/src/math/BoundingBox2.ts", "../../gophergfx/src/math/BoundingCircle.ts", "../../gophergfx/src/core/Transform2.ts", "../../gophergfx/src/lights/LightManager.ts", "../../gophergfx/src/core/Scene.ts", "../../gophergfx/src/loaders/AssetManager.ts", "../../gophergfx/src/core/GfxApp.ts", "../../gophergfx/src/materials/Material3.ts", "../../gophergfx/src/materials/ShaderProgram.ts", "../../gophergfx/src/materials/GouraudMaterial.ts", "../../gophergfx/src/math/BoundingBox3.ts", "../../gophergfx/src/math/BoundingSphere.ts", "../../gophergfx/src/geometry/3d/Mesh.ts", "../../gophergfx/src/geometry/3d/MeshInstance.ts", "../../gophergfx/src/geometry/3d/BoxMesh.ts", "../../gophergfx/src/geometry/3d/SphereMesh.ts", "../../gophergfx/src/geometry/3d/PlaneMesh.ts", "../../gophergfx/src/materials/Material2.ts", "../../gophergfx/src/geometry/2d/Shape.ts", "../../gophergfx/src/geometry/2d/ShapeInstance.ts", "../../gophergfx/src/geometry/2d/Rectangle.ts", "../../gophergfx/src/geometry/2d/Circle.ts", "../../gophergfx/src/geometry/2d/Line.ts", "../../gophergfx/src/interaction/OrbitControls.ts", "../../gophergfx/src/interaction/FirstPersonControls.ts", "../../gophergfx/src/lights/Light.ts", "../../gophergfx/src/lights/AmbientLight.ts", "../../gophergfx/src/lights/DirectionalLight.ts", "../../gophergfx/src/lights/PointLight.ts", "../../gophergfx/src/loaders/StringParser.ts", "../../gophergfx/src/loaders/ObjLoader.ts", "../../gophergfx/src/materials/Texture.ts", "../../gophergfx/src/materials/WireframeMaterial.ts", "../../gophergfx/src/materials/UnlitMaterial.ts", "../../gophergfx/src/materials/BoundingVolumeMaterial.ts", "../../gophergfx/src/math/Plane.ts", "../../gophergfx/src/math/Ray.ts"],
  "sourcesContent": ["export class Color\n{\n    public static readonly WHITE = new Color(1, 1, 1);\n    public static readonly BLACK = new Color(0, 0, 0);\n    public static readonly RED = new Color(1, 0 ,0);\n    public static readonly GREEN = new Color(0, 1 ,0);\n    public static readonly BLUE = new Color(0, 0, 1);\n    public static readonly YELLOW = new Color(1, 1, 0);\n    public static readonly PURPLE = new Color(1, 0, 1);\n    public static readonly CYAN = new Color(0, 1, 1);\n\n    public r: number;\n    public g: number;\n    public b: number;\n    public a: number;\n\n    constructor(r = 0, g = 0, b = 0, a = 1)\n    {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n\n    set(r = 0, g = 0, b = 0, a = 1): void\n    {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n\n    copy(color: Color)\n    {\n        this.r = color.r;\n        this.g = color.g;\n        this.b = color.b;\n        this.a = color.a;\n    }\n}", "import { Matrix3 } from './Matrix3'\n\nexport class Vector2\n{\n    public static readonly ZERO = new Vector2(0, 0);\n    public static readonly ONE = new Vector2(1, 1);\n    public static readonly UP = new Vector2(0, 1);\n    public static readonly DOWN = new Vector2(0, -1);\n    public static readonly LEFT = new Vector2(-1, 0);\n    public static readonly RIGHT = new Vector2(1, 0);\n    public static readonly X_AXIS = Vector2.RIGHT;\n    public static readonly Y_AXIS = Vector2.UP;\n\n    public static copy(v: Vector2): Vector2\n    {\n        return new Vector2(v.x, v.y);\n    }\n\n    public static inverse(v: Vector2): Vector2\n    {\n        return new Vector2(-v.x, -v.y);\n    }\n\n    public static add(v1: Vector2, v2: Vector2): Vector2\n    {\n        return new Vector2(v1.x + v2.x, v1.y + v2.y);\n    }\n\n    public static subtract(v1: Vector2, v2: Vector2): Vector2\n    {\n        return new Vector2(v1.x - v2.x, v1.y - v2.y);\n    }\n\n    public static multiply(v1: Vector2, v2: Vector2): Vector2\n    {\n        return new Vector2(v1.x * v2.x, v1.y * v2.y);\n    }\n\n    public static divide(v1: Vector2, v2: Vector2): Vector2\n    {\n        return new Vector2(v1.x / v2.x, v1.y / v2.y);\n    }\n\n    public static multiplyScalar(v: Vector2, n: number): Vector2\n    {\n        return new Vector2(v.x * n, v.y * n);\n    }\n\n    public static divideScalar(v: Vector2, n: number): Vector2\n    {\n        return new Vector2(v.x / n, v.y / n);\n    }\n\n    public static distanceBetween(v1: Vector2, v2: Vector2): number\n    {\n        return v1.distanceTo(v2);\n    }\n\n    public static angleBetween(v1: Vector2, v2: Vector2): number\n    {\n        return v1.angleBetween(v2);\n    }\n\n    public static angleBetweenSigned(v1: Vector2, v2: Vector2): number\n    {\n        return v1.angleBetweenSigned(v2);\n    }\n\n    public static dot(v1: Vector2, v2: Vector2): number\n    {\n        return v1.x*v2.x + v1.y*v2.y;\n    }\n\n    public static normalize(v: Vector2): Vector2\n    {\n        const sizeSquared = v.x*v.x + v.y*v.y;\n        \n        // zero vectors\n        if(sizeSquared < 1e-8)\n            return new Vector2();\n\n        const scaleFactor = 1 / Math.sqrt(sizeSquared);\n        return new Vector2(v.x * scaleFactor, v.y * scaleFactor);\n    }\n\n    public static rotate(v: Vector2, angle: number): Vector2\n    {\n        return new Vector2(Math.cos(angle)*v.x - Math.sin(angle)*v.y, Math.sin(angle)*v.x + Math.cos(angle)*v.y); \n    }\n\n    public x: number;\n    public y: number;\n    \n    constructor(x = 0, y = 0)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    set(x: number, y: number): void\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    copy(v: Vector2): void\n    {\n        this.x = v.x;\n        this.y = v.y;\n    }\n\n    clone(): Vector2\n    {\n        return new Vector2(this.x, this.y);\n    }\n\n    equals(v: Vector2): boolean\n    {\n        return this.x == v.x && this.y == v.y;\n    }\n\n    add(v: Vector2): void\n    {\n        this.x += v.x;\n        this.y += v.y;\n    }\n\n    subtract(v: Vector2): void\n    {\n        this.x -= v.x;\n        this.y -= v.y;\n    }\n\n    multiply(v: Vector2): void\n    {\n        this.x *= v.x;\n        this.y *= v.y;\n    }\n\n    divide(v: Vector2): void\n    {\n        this.x /= v.x;\n        this.y /= v.y;\n    }\n\n    multiplyScalar(n: number): void\n    {\n        this.x *= n;\n        this.y *= n;\n    }\n\n    divideScalar(n: number): void\n    {\n        this.x /= n;\n        this.y /= n;\n    }\n\n    distanceTo(v: Vector2): number\n    {\n        return Math.sqrt(\n            (this.x - v.x) * (this.x - v.x) + \n            (this.y - v.y) * (this.y - v.y) \n        );\n    }\n\n    setPositionFromMatrix(m: Matrix3): void\n    {\n        this.x = m.mat[6];\n        this.y = m.mat[7];\n    }\n\n    setScaleFromMatrix(m: Matrix3): void\n    {\n        this.x = Math.sqrt(m.mat[0]*m.mat[0] + m.mat[1]*m.mat[1]);\n        this.y = Math.sqrt(m.mat[3]*m.mat[3] + m.mat[4]*m.mat[4]);\n    }\n\n    applyMatrix(m: Matrix3): void\n    {\n        const v = this.clone();\n        const w = 1 / (m.mat[2]*v.x + m.mat[5]*v.y + m.mat[8]);\n        this.x = w * (m.mat[0]*v.x + m.mat[3]*v.y + m.mat[6]);\n        this.y = w * (m.mat[1]*v.x + m.mat[4]*v.y + m.mat[7]);\n    }\n\n    dot(v: Vector2): number\n    {\n        return this.x*v.x + this.y*v.y;\n    }\n\n    length(): number\n    {\n        return Math.sqrt(this.x*this.x + this.y*this.y);\n    }\n\n    normalize(): void\n    {\n        const sizeSquared = this.x*this.x + this.y*this.y;\n        \n        // zero vectors\n        if(sizeSquared < 1e-8)\n            return;\n\n        const scaleFactor = 1 / Math.sqrt(sizeSquared);\n        this.x *= scaleFactor;\n        this.y *= scaleFactor;\n    }\n\n    invert(): void\n    {\n        this.x = -this.x;\n        this.y = -this.y;\n    }\n\n    angleBetween(v: Vector2): number\n    {\n        const v1Norm = Vector2.normalize(this);\n        const v2Norm = Vector2.normalize(v);\n\n        return Math.acos(v1Norm.dot(v2Norm));\n    }\n\n    angleBetweenSigned(v: Vector2): number\n    {\n        const v1Norm = Vector2.normalize(this);\n        const v2Norm = Vector2.normalize(v);\n\n        return Math.atan2(v2Norm.y,v2Norm.x) - Math.atan2(v1Norm.y, v1Norm.x)\n    }\n\n    rotate(angle: number): void\n    {\n        const x = this.x;\n        const y = this.y;\n        this.x = Math.cos(angle)*x - Math.sin(angle)*y;\n        this.y = Math.sin(angle)*x + Math.cos(angle)*y; \n    }\n}", "export class MathUtils\n{\n    public static degreesToRadians(degrees: number)\n    {\n        return degrees * Math.PI / 180;\n    }\n\n    public static radiansToDegrees(radians: number)\n    {\n        return radians * 180 / Math.PI;\n    }\n\n    public static rescale(value: number, min: number, max: number, scaledMin: number, scaledMax: number): number\n    {\n        return scaledMin + (scaledMax - scaledMin) * (value - min) / (max - min);\n    }\n\n    public static clamp(value: number, min: number, max: number): number\n    {\n        return Math.max(min, Math.min(max, value));\n    }\n}", "import { Scene } from \"./Scene\";\nimport { Camera } from \"./Camera\";\nimport { Color } from \"../math/Color\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { MathUtils } from \"../math/MathUtils\";\n\nexport enum Viewport\n{\n    FIT,\n    CROP,\n    STRETCH\n}\n\nexport class Renderer\n{\n    public background: Color;\n    public viewport: Viewport;\n\n    public readonly gfxCanvas: HTMLCanvasElement;\n    public readonly gl: WebGL2RenderingContext;\n\n    constructor()\n    {\n        this.gfxCanvas = document.getElementById(\"gfxCanvas\") as HTMLCanvasElement;\n        if(!this.gfxCanvas)\n        {\n            alert(\"Unable to find gfxCanvas.\");\n        }\n\n        this.gfxCanvas.width = window.innerWidth;\n        this.gfxCanvas.height = window.innerHeight;\n\n        // Initialize the GL context\n        // Disabling alpha in the back buffer prevents texture blending issues\n        // due to the way WebGL composites the canvas with the body background\n        const gl = this.gfxCanvas.getContext(\"webgl2\", {alpha: false})!;\n        if(!gl) \n        {\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n        }\n        this.gl = gl!;\n\n        // depth testing\n        gl.enable(gl.DEPTH_TEST);\n        gl.depthFunc(gl.LEQUAL);\n\n        // back face culling\n        gl.enable(gl.CULL_FACE);\n        gl.cullFace(gl.BACK);\n        \n        // texturing with transparency\n        gl.enable(this.gl.BLEND) ;\n        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\n        this.background = new Color();\n        this.viewport = Viewport.FIT;\n    }\n\n    resize(width: number, height: number, aspectRatio: number): void\n    {\n        this.gfxCanvas.width = width;\n        this.gfxCanvas.height = height;\n\n        if(this.viewport == Viewport.FIT)\n        {\n            // Resize and center the viewport to preserve the aspect ratio\n            if(aspectRatio > window.innerWidth / window.innerHeight)\n            {\n                this.gl.viewport(\n                    0, \n                    (window.innerHeight - window.innerWidth / aspectRatio) / 2, \n                    window.innerWidth, \n                    window.innerWidth / aspectRatio\n                );\n            }\n            else\n            {\n                this.gl.viewport(\n                    (window.innerWidth - window.innerHeight * aspectRatio) / 2, \n                    0, \n                    window.innerHeight * aspectRatio, \n                    window.innerHeight\n                );\n            }\n        }\n        else if(this.viewport == Viewport.CROP)\n        {\n            // Resize and center the viewport to crop within the window\n            if(aspectRatio > window.innerWidth / window.innerHeight)\n            {\n                this.gl.viewport(\n                    (window.innerWidth - window.innerHeight * aspectRatio) / 2, \n                    0, \n                    window.innerHeight * aspectRatio, \n                    window.innerHeight\n                );\n            }\n            else\n            {\n                this.gl.viewport(\n                    0, \n                    (window.innerHeight - window.innerWidth / aspectRatio) / 2, \n                    window.innerWidth, \n                    window.innerWidth / aspectRatio\n                );\n            }\n        }\n        else\n        {\n            // Resize the viewport fill the entire entire window\n            // This does not preserve the aspect ratio\n            this.gl.viewport(\n                0,\n                0, \n                window.innerWidth, \n                window.innerHeight\n            );\n        }\n    }\n\n    render(scene: Scene, camera: Camera): void\n    {\n        if(camera.projectionMatrixDirty)\n        {\n            this.resize(this.gfxCanvas.width, this.gfxCanvas.height, camera.getAspectRatio());\n            camera.projectionMatrixDirty = false;\n        }\n\n        this.gl.clearColor(this.background.r, this.background.g, this.background.b, this.background.a);\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT); \n        \n        scene.draw(camera);\n    }\n\n    getNormalizedDeviceCoordinates(mouseX: number, mouseY: number): Vector2\n    {\n        const viewport = this.gl.getParameter(this.gl.VIEWPORT) as Int32Array;\n        return new Vector2(\n            MathUtils.clamp((mouseX - viewport[0]) / viewport[2] * 2 - 1, -1, 1),\n            MathUtils.clamp((mouseY - viewport[1]) / viewport[3] * -2 + 1, -1, 1)\n        );\n    }\n}", "import { Matrix4 } from './Matrix4'\nimport { Quaternion } from './Quaternion';\n\nexport class Vector3\n{\n    public static readonly ZERO = new Vector3(0, 0, 0);\n    public static readonly ONE = new Vector3(1, 1, 1);\n    public static readonly UP = new Vector3(0, 1, 0);\n    public static readonly DOWN = new Vector3(0, -1, 0);\n    public static readonly LEFT = new Vector3(-1, 0, 0);\n    public static readonly RIGHT = new Vector3(1, 0, 0);\n    public static readonly FORWARD = new Vector3(0, 0, -1);\n    public static readonly BACK = new Vector3(0, 0, 1);\n    public static readonly X_AXIS = Vector3.RIGHT;\n    public static readonly Y_AXIS = Vector3.UP;\n    public static readonly Z_AXIS = Vector3.FORWARD;\n\n    public static copy(v: Vector3): Vector3\n    {\n        return new Vector3(v.x, v.y, v.z);\n    }\n\n    public static inverse(v: Vector3): Vector3\n    {\n        return new Vector3(-v.x, -v.y, -v.z);\n    }\n\n    public static add(v1: Vector3, v2: Vector3): Vector3\n    {\n        return new Vector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);\n    }\n\n    public static subtract(v1: Vector3, v2: Vector3): Vector3\n    {\n        return new Vector3(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);\n    }\n\n    public static multiply(v1: Vector3, v2: Vector3): Vector3\n    {\n        return new Vector3(v1.x * v2.x, v1.y * v2.y, v1.z * v2.z);\n    }\n\n    public static divide(v1: Vector3, v2: Vector3): Vector3\n    {\n        return new Vector3(v1.x / v2.x, v1.y / v2.y, v1.z / v2.z);\n    }\n\n\n    public static dot(v1: Vector3, v2: Vector3): number\n    {\n        return v1.x*v2.x + v1.y*v2.y + v1.z*v2.z;\n    }\n\n    public static cross(v1: Vector3, v2: Vector3): Vector3\n    {\n        return new Vector3(\n            v1.y * v2.z - v1.z * v2.y,\n            v1.z * v2.x - v1.x * v2.z,\n            v1.x * v2.y - v1.y * v2.x\n        );\n    }\n\n    public static multiplyScalar(v: Vector3, n: number): Vector3\n    {\n        return new Vector3(v.x * n, v.y * n, v.z * n);\n    }\n\n    public static divideScalar(v: Vector3, n: number): Vector3\n    {\n        return new Vector3(v.x / n, v.y / n, v.z / n);\n    }\n\n    public static normalize(v: Vector3): Vector3\n    {\n        const sizeSquared = v.x*v.x + v.y*v.y + v.z*v.z;\n        \n        // zero vectors\n        if(sizeSquared < 1e-8)\n            return new Vector3();\n\n        const scaleFactor = 1 / Math.sqrt(sizeSquared);\n        return new Vector3(v.x * scaleFactor, v.y * scaleFactor, v.z * scaleFactor);\n    }\n\n    public static angleBetween(v1: Vector3, v2: Vector3): number\n    {\n        return v1.angleBetween(v2);\n    }\n\n    public static distanceBetween(v1: Vector3, v2: Vector3): number\n    {\n        return v1.distanceTo(v2);\n    }\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x = 0, y = 0, z = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    set(x: number, y: number, z: number): void\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    copy(v: Vector3): void\n    {\n        this.x = v.x;\n        this.y = v.y;\n        this.z = v.z;\n    }\n\n    clone(): Vector3\n    {\n        return new Vector3(this.x, this.y, this.z);\n    }\n\n    equals(v: Vector3): boolean\n    {\n        return this.x == v.x && this.y == v.y && this.z == v.z;\n    }\n\n    add(v: Vector3): void\n    {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n    }\n\n    subtract(v: Vector3): void\n    {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n    }\n\n    multiply(v: Vector3): void\n    {\n        this.x *= v.x;\n        this.y *= v.y;\n        this.z *= v.z;\n    }\n\n    divide(v: Vector3): void\n    {\n        this.x /= v.x;\n        this.y /= v.y;\n        this.z /= v.z;\n    }\n\n    dot(v: Vector3): number\n    {\n        return this.x*v.x + this.y*v.y + this.z*v.z;\n    }\n\n    cross(v: Vector3): Vector3\n    {\n        return new Vector3(\n            this.y * v.z - this.z * v.y,\n            this.z * v.x - this.x * v.z,\n            this.x * v.y - this.y * v.x\n        );\n    }\n\n    multiplyScalar(n: number): void\n    {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n    }\n\n    divideScalar(n: number): void\n    {\n        this.x /= n;\n        this.y /= n;\n        this.z /= n;\n    }\n\n    length(): number\n    {\n        return Math.sqrt(this.x*this.x + this.y*this.y + this.z*this.z);\n    }\n\n    normalize(): void\n    {\n        const sizeSquared = this.x*this.x + this.y*this.y + this.z*this.z;\n        \n        // zero vectors\n        if(sizeSquared < 1e-8)\n            return;\n\n        const scaleFactor = 1 / Math.sqrt(sizeSquared);\n        this.x *= scaleFactor;\n        this.y *= scaleFactor;\n        this.z *= scaleFactor;\n    }\n\n    invert(): void\n    {\n        this.x = -this.x;\n        this.y = -this.y;\n        this.z = -this.z;\n    }\n\n    applyMatrix(m: Matrix4): void\n    {\n        const v = this.clone();\n        const w = 1 / (m.mat[3]*v.x + m.mat[7]*v.y + m.mat[11]*v.z + m.mat[15]);\n        this.x = w * (m.mat[0]*v.x + m.mat[4]*v.y + m.mat[8]*v.z + m.mat[12]);\n        this.y = w * (m.mat[1]*v.x + m.mat[5]*v.y + m.mat[9]*v.z + m.mat[13]);\n        this.z = w * (m.mat[2]*v.x + m.mat[6]*v.y + m.mat[10]*v.z + m.mat[14]);\n    }\n\n    applyMatrixAsNormal(m: Matrix4): void\n    {\n        const v = this.clone();\n        const w = 1 / (m.mat[3]*v.x + m.mat[7]*v.y + m.mat[11]*v.z);\n        this.x = w * (m.mat[0]*v.x + m.mat[4]*v.y + m.mat[8]*v.z);\n        this.y = w * (m.mat[1]*v.x + m.mat[5]*v.y + m.mat[9]*v.z);\n        this.z = w * (m.mat[2]*v.x + m.mat[6]*v.y + m.mat[10]*v.z);\n    }\n\n    rotate(q: Quaternion): void\n    {\n        this.copy(q.rotate(this));\n    }\n\n    angleBetween(v: Vector3): number\n    {\n        const v1Norm = Vector3.normalize(this);\n        const v2Norm = Vector3.normalize(v);\n\n        return Math.acos(v1Norm.dot(v2Norm));\n    }\n\n    distanceTo(v: Vector3): number\n    {\n        return Math.sqrt(\n            (this.x - v.x) * (this.x - v.x) + \n            (this.y - v.y) * (this.y - v.y) +\n            (this.z - v.z) * (this.z - v.z) \n        );\n    }\n\n    setPositionFromMatrix(m: Matrix4): void\n    {\n        this.x = m.mat[12];\n        this.y = m.mat[13];\n        this.z = m.mat[14];\n    }\n\n    setScaleFromMatrix(m: Matrix4): void\n    {\n        this.x = Math.sqrt(m.mat[0]*m.mat[0] + m.mat[1]*m.mat[1] + m.mat[2]*m.mat[2]);\n        this.y = Math.sqrt(m.mat[4]*m.mat[4] + m.mat[5]*m.mat[5] + m.mat[6]*m.mat[6]);\n        this.z = Math.sqrt(m.mat[8]*m.mat[8] + m.mat[9]*m.mat[9] + m.mat[10]*m.mat[10]);\n    }\n}", "import { Vector3 } from \"./Vector3\";\nimport { Matrix4 } from \"./Matrix4\";\nimport { transcode } from \"buffer\";\n\nexport class Quaternion\n{\n    public static readonly IDENTITY: Quaternion = new Quaternion();\n\n    public static multiply(q1: Quaternion, q2: Quaternion): Quaternion\n    {\n        const dest = new Quaternion();\n\n        dest.w = q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z;\n        dest.x = q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y;\n        dest.y = q1.w*q2.y + q1.y*q2.w + q1.z*q2.x - q1.x*q2.z;\n        dest.z = q1.w*q2.z + q1.z*q2.w + q1.x*q2.y - q1.y*q2.x;\n\n        return dest;\n    }\n\n    public static normalize(q: Quaternion): Quaternion\n    {\n        const dest = q.clone();\n        dest.normalize();\n        return dest;\n    }\n\n    public static inverse(q: Quaternion): Quaternion\n    {\n        const dest = q.clone();\n        dest.invert();\n        return dest;\n    }\n\n    public static makeRotationX(angle: number): Quaternion\n    {\n        const dest = new Quaternion();\n        dest.setRotationX(angle);\n        return dest;\n    }\n\n    public static makeRotationY(angle: number): Quaternion\n    {\n        const dest = new Quaternion();\n        dest.setRotationY(angle);\n        return dest;\n    }\n\n    public static makeRotationZ(angle: number): Quaternion\n    {\n        const dest = new Quaternion();\n        dest.setRotationZ(angle);\n        return dest;\n    }\n\n    public static makeAxisAngle(axis: Vector3, angle: number): Quaternion\n    {\n        const dest = new Quaternion();\n        dest.setAxisAngle(axis, angle);\n        return dest;\n    }\n\n    public static makeEulerAngles(yaw: number, pitch: number, roll: number): Quaternion\n    {\n        const dest = new Quaternion();\n        dest.setEulerAngles(yaw, pitch, roll);\n        return dest;\n    }\n\n    public static makeMatrix(matrix: Matrix4): Quaternion\n    {\n        const dest = new Quaternion();\n        dest.setMatrix(matrix);\n        return dest;\n    }\n    \n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x = 0, y = 0, z = 0, w = 1)\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    set(x: number, y: number, z: number, w: number): void\n    {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    setRotationX(angle: number): void\n    {\n        this.w = Math.cos(angle / 2);\n        this.x = Math.sin(angle / 2);\n        this.y = 0;\n        this.z = 0;\n    }\n\n    setRotationY(angle: number): void\n    {\n        this.w = Math.cos(angle / 2);\n        this.x = 0;\n        this.y = Math.sin(angle / 2);\n        this.z = 0;\n    }\n\n    setRotationZ(angle: number): void\n    {\n        this.w = Math.cos(angle / 2);\n        this.x = 0;\n        this.y = 0;\n        this.z = Math.sin(angle / 2);\n    }\n\n    // assumes axis is normalized\n    setAxisAngle(axis: Vector3, angle: number): void\n    {\n        const sinAngle = Math.sin(angle / 2);\n\n        this.w = Math.cos(angle / 2);\n        this.x = sinAngle * axis.x;\n        this.y = sinAngle * axis.y;\n        this.z = sinAngle * axis.z;\n    }\n\n    setEulerAngles(yaw: number, pitch: number, roll: number): void\n    {\n        const cosPitch = Math.cos(pitch/2);\n        const sinPitch = Math.sin(pitch/2);\n\n        const cosYaw = Math.cos(yaw/2);\n        const sinYaw = Math.sin(yaw/2);\n        \n        const cosRoll = Math.cos(-roll/2);\n        const sinRoll = Math.sin(-roll/2);\n\n        this.x = sinPitch * cosYaw * cosRoll + cosPitch * sinYaw * sinRoll;\n        this.y = cosPitch * sinYaw * cosRoll - sinPitch * cosYaw * sinRoll;\n        this.z = cosPitch * cosYaw * sinRoll + sinPitch * sinYaw * cosRoll;    \n        this.w = cosPitch * cosYaw * cosRoll - sinPitch * sinYaw * sinRoll;\n    }\n\n    // https://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n    setMatrix(matrix: Matrix4): void\n    {\n        this.w = Math.sqrt(1 + matrix.mat[0] + matrix.mat[5] + matrix.mat[10]) / 2;\n        this.x = (matrix.mat[6] - matrix.mat[9]) / (4 * this.w);\n        this.y = (matrix.mat[8] - matrix.mat[2]) / (4 * this.w);\n        this.z = (matrix.mat[1] - matrix.mat[4]) / (4 * this.w);\n    }\n\n    copy(q: Quaternion): void\n    {\n        this.x = q.x;\n        this.y = q.y;\n        this.z = q.z;\n        this.w = q.w;\n    }\n\n    clone(): Quaternion\n    {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n    }\n\n    // Multiply by q on the LHS\n    // Quaternion multiplication is not commutative\n    multiply(q: Quaternion): void\n    {\n        this.copy(Quaternion.multiply(q, this));\n    }\n\n    normalize(): void\n    {\n        const normalizeFactor = 1 / Math.sqrt(this.x * this.x + this.y * this.y +\n            this.z * this.z + this.w * this.w);\n\n        this.x *= normalizeFactor;\n        this.y *= normalizeFactor;\n        this.z *= normalizeFactor;\n        this.w *= normalizeFactor;\n    }\n    \n    rotate(v: Vector3): Vector3\n    {\n        // Extract the vector part of the quaternion\n        const u = new Vector3(this.x, this.y, this.z);\n\n        // vprime = 2.0f * dot(u, v) * u\n        const result = Vector3.multiplyScalar(u, 2 * u.dot(v));\n\n        // + (s*s - dot(u, u)) * v\n        result.add(Vector3.multiplyScalar(v, this.w * this.w - u.dot(u)));\n\n        const crossUV = u.cross(v);\n        crossUV.multiplyScalar(2 * this.w);\n        result.add(crossUV);\n\n        return result;\n    }\n\n    invert(): void\n    {\n        const norm = 1 / (this.x*this.x + this.y*this.y + this.z*this.z + this.w*this.w);\n        this.x *= -norm;\n        this.y *= -norm;\n        this.z *= -norm;\n        this.w *= norm;\n    }\n\n    inverse(): Quaternion\n    {\n        return Quaternion.inverse(this);\n    }\n\n    // based on http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm\n    getMatrix(): Matrix4\n    {\n        const sqw = this.w*this.w;\n        const sqx = this.x*this.x;\n        const sqy = this.y*this.y;\n        const sqz = this.z*this.z;\n\n        // invs (inverse square length) is only required if quaternion is not already normalised\n        const invs = 1 / (sqx + sqy + sqz + sqw);\n\n        const tmp1 = this.x*this.y;\n        const tmp2 = this.z*this.w;\n        const tmp3 = this.x*this.z;\n        const tmp4 = this.y*this.w;\n        const tmp5 = this.y*this.z;\n        const tmp6 = this.x*this.w;\n        \n        return Matrix4.fromRowMajor(\n            ( sqx - sqy - sqz + sqw)*invs, 2 * (tmp1 - tmp2)*invs, 2 * (tmp3 + tmp4)*invs, 0,\n            2 * (tmp1 + tmp2)*invs, (-sqx + sqy - sqz + sqw)*invs, 2 * (tmp5 - tmp6)*invs, 0,\n            2 * (tmp3 - tmp4)*invs, 2 * (tmp5 + tmp6)*invs, (-sqx - sqy + sqz + sqw), 0,\n            0, 0, 0, 1\n        );\n    }\n}", "import { Vector3 } from \"./Vector3\";\nimport { Quaternion } from \"./Quaternion\";\n\nexport class Matrix4\n{\n    public static readonly IDENTITY = new Matrix4();\n\n    public mat: Array<number>;\n\n    static multiply(m1: Matrix4, m2: Matrix4): Matrix4\n    {\n        const m = new Matrix4();\n        m.mat[0] = 0;\n        m.mat[5] = 0;\n        m.mat[10] = 0;\n        m.mat[15] = 0;\n\n        for (let r = 0; r < 4; r++) {\n            for (let c = 0; c < 4; c++) {\n                for (let i = 0; i < 4; i++) {\n                    m.mat[r*4+c] += m1.mat[r*4+i] * m2.mat[i*4+c];\n                }\n            }\n        }\n\n        return m;\n    }\n\n    static copy(m: Matrix4): Matrix4\n    {\n        const mat = new Matrix4();\n        mat.copy(m);\n        return mat;\n    }\n\n    public static fromRowMajor(n1: number, n2: number, n3: number, n4: number, \n        n5: number, n6: number, n7: number, n8: number, \n        n9: number, n10: number, n11: number, n12: number, \n        n13: number, n14: number, n15: number, n16: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.setRowMajor(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16);\n        return matrix;\n    }\n\n    public static fromColumnMajor(n1: number, n2: number, n3: number, n4: number, \n        n5: number, n6: number, n7: number, n8: number, \n        n9: number, n10: number, n11: number, n12: number, \n        n13: number, n14: number, n15: number, n16: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.setColumnMajor(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16);\n        return matrix;\n    }\n\n    public static makeTranslation(v: Vector3): Matrix4\n    {\n        return Matrix4.fromRowMajor(\n            1, 0, 0, v.x,\n            0, 1, 0, v.y,\n            0, 0, 1, v.z,\n            0, 0, 0, 1\n        );\n    }\n\n    public static makeRotationX(angle: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.makeRotationX(angle);\n        return matrix;\n    }\n\n    public static makeRotationY(angle: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.makeRotationY(angle);\n        return matrix;\n    }\n\n    public static makeRotationZ(angle: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.makeRotationZ(angle);\n        return matrix;\n    }\n\n    public static makeRotation(axis: Vector3, angle: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.makeRotation(axis, angle);\n        return matrix;\n    }\n\n    public static makeScale(scale: Vector3): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.makeScale(scale);\n        return matrix;\n    }\n\n    public static makeTransform(position = Vector3.ZERO, rotation = Quaternion.IDENTITY, scale = Vector3.UP): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.makeTransform(position, rotation, scale);\n        return matrix;\n    }\n\n    public static lookAt(eye: Vector3, target: Vector3, up: Vector3): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.lookAt(eye, target, up);\n        return matrix;\n    }\n\n    public static makeOrthographic(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.makeOrthographic(left, right, bottom, top, near, far);\n        return matrix;\n    }\n\n    public static makePerspective(fov: number, aspectRatio: number, near: number, far: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.makePerspective(fov, aspectRatio, near, far);\n        return matrix;\n    }\n\n    public static makeFrustum(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4\n    {\n        const matrix = new Matrix4();\n        matrix.makeFrustum(left, right, bottom, top, near, far);\n        return matrix;\n    }\n\n    constructor()\n    {\n        this.mat = [ \n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1\n        ];\n    }\n\n    setColumnMajor(n1: number, n2: number, n3: number, n4: number, \n        n5: number, n6: number, n7: number, n8: number, \n        n9: number, n10: number, n11: number, n12: number, \n        n13: number, n14: number, n15: number, n16: number): void\n    {\n        this.mat[0] = n1;\n        this.mat[1] = n2;\n        this.mat[2] = n3;\n        this.mat[3] = n4;\n        this.mat[4] = n5;\n        this.mat[5] = n6;\n        this.mat[6] = n7;\n        this.mat[7] = n8;\n        this.mat[8] = n9;\n        this.mat[9] = n10;\n        this.mat[10] = n11;\n        this.mat[11] = n12;\n        this.mat[12] = n13;\n        this.mat[13] = n14;\n        this.mat[14] = n15;\n        this.mat[15] = n16;\n    }\n\n    setRowMajor(n1: number, n2: number, n3: number, n4: number, \n        n5: number, n6: number, n7: number, n8: number, \n        n9: number, n10: number, n11: number, n12: number, \n        n13: number, n14: number, n15: number, n16: number): void\n    {\n        this.mat[0] = n1;\n        this.mat[1] = n5;\n        this.mat[2] = n9;\n        this.mat[3] = n13;\n        this.mat[4] = n2;\n        this.mat[5] = n6;\n        this.mat[6] = n10;\n        this.mat[7] = n14;\n        this.mat[8] = n3;\n        this.mat[9] = n7;\n        this.mat[10] = n11;\n        this.mat[11] = n15;\n        this.mat[12] = n4;\n        this.mat[13] = n8;\n        this.mat[14] = n12;\n        this.mat[15] = n16;\n    }\n\n    copy(m: Matrix4): void\n    {\n        for(let i=0; i < 16; i++)\n            this.mat[i] = m.mat[i];\n    }\n\n    clone(): Matrix4\n    {\n        const matrix = new Matrix4();\n        \n        for(let i=0; i < 16; i++)\n            matrix.mat[i] = this.mat[i];\n\n        return matrix;\n    }\n\n    element(row: number, col: number): number\n    {\n        return this.mat[col*4 + row];\n    }\n\n    set(value: number, row: number, col: number): void\n    {\n       this.mat[col*4 + row] = value;\n    }\n\n    multiply(m: Matrix4): void\n    {\n        const temp = Matrix4.multiply(m, this);\n        this.copy(temp);\n    }\n\n    makeTranslation(v: Vector3): void\n    {\n        this.setRowMajor(\n            1, 0, 0, v.x,\n            0, 1, 0, v.y,\n            0, 0, 1, v.z,\n            0, 0, 0, 1\n        );\n    }\n\n    makeRotationX(angle: number): void\n    {\n        const cosTheta = Math.cos(angle);\n        const sinTheta = Math.sin(angle);\n        \n        this.setRowMajor(\n            1, 0, 0, 0,\n            0, cosTheta, -sinTheta, 0,\n            0, sinTheta, cosTheta, 0,\n            0, 0, 0, 1\n        );\n    }\n\n    makeRotationY(angle: number): void\n    {\n        const cosTheta = Math.cos(angle);\n        const sinTheta = Math.sin(angle);\n   \n        this.setRowMajor(\n            cosTheta, 0, sinTheta, 0,\n            0, 1, 0, 0,\n            -sinTheta, 0, cosTheta, 0,\n            0, 0, 0, 1\n        );\n    }\n\n    makeRotationZ(angle: number): void\n    {\n        const cosTheta = Math.cos(angle);\n        const sinTheta = Math.sin(angle);\n        this.setRowMajor(\n            cosTheta, -sinTheta, 0, 0,\n            sinTheta, cosTheta, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1\n        );\n    }\n\n    makeRotation(axis: Vector3, angle: number): void\n    {\n        const c = Math.cos(angle);\n\t\tconst s = Math.sin(angle);\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\t\tthis.setRowMajor(\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n    }\n\n    makeScale(scale: Vector3): void\n    {\n        this.setRowMajor(\n            scale.x, 0, 0, 0,\n            0, scale.y, 0, 0,\n            0, 0, scale.z, 0,\n            0, 0, 0, 1    \n        );\n    }\n\n    getTranslation(): Vector3\n    {\n        return new Vector3(this.mat[12], this.mat[13], this.mat[14]);\n    }\n\n    getRotation(): Quaternion\n    {\n        return Quaternion.makeMatrix(this);\n    }\n\n    getScale(): Vector3\n    {\n        return new Vector3(\n            Math.sqrt(this.mat[0]*this.mat[0] + this.mat[1]*this.mat[1] + this.mat[2]*this.mat[2]),\n            Math.sqrt(this.mat[4]*this.mat[4] + this.mat[5]*this.mat[5] + this.mat[6]*this.mat[6]),\n            Math.sqrt(this.mat[8]*this.mat[8] + this.mat[9]*this.mat[9] + this.mat[10]*this.mat[10])\n        );\n    }\n\n    makeOrthographic(left: number, right: number, bottom: number, top: number, near: number, far: number): void\n    {\n        this.setRowMajor(\n            2/(right-left), 0, 0, -(right+left)/(right-left),\n            0, 2/(top-bottom), 0, -(top+bottom)/(top-bottom),\n            0, 0, -2/(far-near), -(far+near)/(far-near),\n            0, 0, 0, 1\n        );\n    }\n\n    makePerspective(fov: number, aspectRatio: number, near: number, far: number): void\n    {\n        const yMax = near * Math.tan(fov * Math.PI / 360);\n        const xMax = yMax * aspectRatio;\n        this.makeFrustum(-xMax, xMax, -yMax, yMax, near, far); \n    }\n\n    makeFrustum(left: number, right: number, bottom: number, top: number, near: number, far: number): void\n    {\n        this.setRowMajor(\n            2*near/(right-left), 0, (right+left)/(right-left), 0,\n            0, 2*near/(top-bottom), (top+bottom)/(top-bottom), 0,\n            0, 0, -(far+near)/(far-near), -2*far*near/(far-near),\n            0, 0, -1, 0\n        );\n    }\n\n    makeTransform(position = Vector3.ZERO, rotation = Quaternion.IDENTITY, scale = Vector3.ONE): void\n    {\n        this.makeTranslation(position);\n        this.multiply(rotation.getMatrix());\n        this.multiply(Matrix4.makeScale(scale));\n    }\n\n    lookAt(eye: Vector3, target: Vector3, up = Vector3.UP): void\n    {\n        const z = Vector3.subtract(eye, target);\n        z.normalize();\n\n        const x = Vector3.cross(up, z);\n        x.normalize();\n\n        const y = Vector3.cross(z, x);\n\n        const rotation = Matrix4.fromRowMajor(\n            x.x, y.x, z.x, 0,\n            x.y, y.y, z.y, 0,\n            x.z, y.z, z.z, 0,\n            0, 0, 0, 1\n        );\n\n        const translation = Matrix4.makeTranslation(eye);\n        this.copy(Matrix4.multiply(rotation, translation));\n    }\n\n    multiplyScalar(x: number): void\n    {\n        for(let i=0; i < 16; i++)\n            this.mat[i] *= x;\n    }\n\n    // Code from http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    determinant(): number\n    {\n        const determinant = \n            this.mat[3] * this.mat[6] * this.mat[9] * this.mat[12]-\n            this.mat[2] * this.mat[7] * this.mat[9] * this.mat[12]-\n            this.mat[3] * this.mat[5] * this.mat[10] * this.mat[12]+\n            this.mat[1] * this.mat[7] * this.mat[10] * this.mat[12]+\n            this.mat[2] * this.mat[5] * this.mat[11] * this.mat[12]-\n            this.mat[1] * this.mat[6] * this.mat[11] * this.mat[12]-\n            this.mat[3] * this.mat[6] * this.mat[8] * this.mat[13]+\n            this.mat[2] * this.mat[7] * this.mat[8] * this.mat[13]+\n            this.mat[3] * this.mat[4] * this.mat[10] * this.mat[13]-\n            this.mat[0] * this.mat[7] * this.mat[10] * this.mat[13]-\n            this.mat[2] * this.mat[4] * this.mat[11] * this.mat[13]+\n            this.mat[0] * this.mat[6] * this.mat[11] * this.mat[13]+\n            this.mat[3] * this.mat[5] * this.mat[8] * this.mat[14]-\n            this.mat[1] * this.mat[7] * this.mat[8] * this.mat[14]-\n            this.mat[3] * this.mat[4] * this.mat[9] * this.mat[14]+\n            this.mat[0] * this.mat[7] * this.mat[9] * this.mat[14]+\n            this.mat[1] * this.mat[4] * this.mat[11] * this.mat[14]-\n            this.mat[0] * this.mat[5] * this.mat[11] * this.mat[14]-\n            this.mat[2] * this.mat[5] * this.mat[8] * this.mat[15]+\n            this.mat[1] * this.mat[6] * this.mat[8] * this.mat[15]+\n            this.mat[2] * this.mat[4] * this.mat[9] * this.mat[15]-\n            this.mat[0] * this.mat[6] * this.mat[9] * this.mat[15]-\n            this.mat[1] * this.mat[4] * this.mat[10] * this.mat[15]+\n            this.mat[0] * this.mat[5] * this.mat[10] * this.mat[15];\n\n        return determinant;\n    }\n\n    // Code from http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    inverse(): Matrix4\n    {\n        // Check for singular matrix\n        const determinant = this.determinant();\n        if (Math.abs(determinant) < 1e-8)\n            return new Matrix4();\n\n        const inverse = new Matrix4();\n\n        inverse.mat[0] = (this.mat[6]*this.mat[11]*this.mat[13] -\n            this.mat[7]*this.mat[10]*this.mat[13] +\n            this.mat[7]*this.mat[9]*this.mat[14] -\n            this.mat[5]*this.mat[11]*this.mat[14] -\n            this.mat[6]*this.mat[9]*this.mat[15] +\n            this.mat[5]*this.mat[10]*this.mat[15])/determinant;\n\n        inverse.mat[1] = (this.mat[3]*this.mat[10]*this.mat[13] -\n            this.mat[2]*this.mat[11]*this.mat[13] -\n            this.mat[3]*this.mat[9]*this.mat[14] +\n            this.mat[1]*this.mat[11]*this.mat[14] +\n            this.mat[2]*this.mat[9]*this.mat[15] -\n            this.mat[1]*this.mat[10]*this.mat[15])/determinant;\n        \n        inverse.mat[2] = (this.mat[2]*this.mat[7]*this.mat[13] -\n            this.mat[3]*this.mat[6]*this.mat[13] +\n            this.mat[3]*this.mat[5]*this.mat[14] -\n            this.mat[1]*this.mat[7]*this.mat[14] -\n            this.mat[2]*this.mat[5]*this.mat[15] +\n            this.mat[1]*this.mat[6]*this.mat[15])/determinant;\n        \n        inverse.mat[3] = (this.mat[3]*this.mat[6]*this.mat[9] -\n            this.mat[2]*this.mat[7]*this.mat[9] -\n            this.mat[3]*this.mat[5]*this.mat[10] +\n            this.mat[1]*this.mat[7]*this.mat[10] +\n            this.mat[2]*this.mat[5]*this.mat[11] -\n            this.mat[1]*this.mat[6]*this.mat[11])/determinant;\n\n        inverse.mat[4] = (this.mat[7]*this.mat[10]*this.mat[12] -\n            this.mat[6]*this.mat[11]*this.mat[12] -\n            this.mat[7]*this.mat[8]*this.mat[14] +\n            this.mat[4]*this.mat[11]*this.mat[14] +\n            this.mat[6]*this.mat[8]*this.mat[15] -\n            this.mat[4]*this.mat[10]*this.mat[15])/determinant;\n            \n        inverse.mat[5] = (this.mat[2]*this.mat[11]*this.mat[12] -\n            this.mat[3]*this.mat[10]*this.mat[12] +\n            this.mat[3]*this.mat[8]*this.mat[14] -\n            this.mat[0]*this.mat[11]*this.mat[14] -\n            this.mat[2]*this.mat[8]*this.mat[15] +\n            this.mat[0]*this.mat[10]*this.mat[15])/determinant;\n            \n        inverse.mat[6] = (this.mat[3]*this.mat[6]*this.mat[12] -\n            this.mat[2]*this.mat[7]*this.mat[12] -\n            this.mat[3]*this.mat[4]*this.mat[14] +\n            this.mat[0]*this.mat[7]*this.mat[14] +\n            this.mat[2]*this.mat[4]*this.mat[15] -\n            this.mat[0]*this.mat[6]*this.mat[15])/determinant;\n            \n        inverse.mat[7] = (this.mat[2]*this.mat[7]*this.mat[8] -\n            this.mat[3]*this.mat[6]*this.mat[8] +\n            this.mat[3]*this.mat[4]*this.mat[10] -\n            this.mat[0]*this.mat[7]*this.mat[10] -\n            this.mat[2]*this.mat[4]*this.mat[11] +\n            this.mat[0]*this.mat[6]*this.mat[11])/determinant;\n            \n        inverse.mat[8] = (this.mat[5]*this.mat[11]*this.mat[12] -\n            this.mat[7]*this.mat[9]*this.mat[12] +\n            this.mat[7]*this.mat[8]*this.mat[13] -\n            this.mat[4]*this.mat[11]*this.mat[13] -\n            this.mat[5]*this.mat[8]*this.mat[15] +\n            this.mat[4]*this.mat[9]*this.mat[15])/determinant;\n            \n        inverse.mat[9] = (this.mat[3]*this.mat[9]*this.mat[12] -\n            this.mat[1]*this.mat[11]*this.mat[12] -\n            this.mat[3]*this.mat[8]*this.mat[13] +\n            this.mat[0]*this.mat[11]*this.mat[13] +\n            this.mat[1]*this.mat[8]*this.mat[15] -\n            this.mat[0]*this.mat[9]*this.mat[15])/determinant;\n            \n        inverse.mat[10] = (this.mat[1]*this.mat[7]*this.mat[12] -\n            this.mat[3]*this.mat[5]*this.mat[12] +\n            this.mat[3]*this.mat[4]*this.mat[13] -\n            this.mat[0]*this.mat[7]*this.mat[13] -\n            this.mat[1]*this.mat[4]*this.mat[15] +\n            this.mat[0]*this.mat[5]*this.mat[15])/determinant;\n            \n        inverse.mat[11] = (this.mat[3]*this.mat[5]*this.mat[8] -\n            this.mat[1]*this.mat[7]*this.mat[8] -\n            this.mat[3]*this.mat[4]*this.mat[9] +\n            this.mat[0]*this.mat[7]*this.mat[9] +\n            this.mat[1]*this.mat[4]*this.mat[11] -\n            this.mat[0]*this.mat[5]*this.mat[11])/determinant;\n            \n        inverse.mat[12] = (this.mat[6]*this.mat[9]*this.mat[12] -\n            this.mat[5]*this.mat[10]*this.mat[12] -\n            this.mat[6]*this.mat[8]*this.mat[13] +\n            this.mat[4]*this.mat[10]*this.mat[13] +\n            this.mat[5]*this.mat[8]*this.mat[14] -\n            this.mat[4]*this.mat[9]*this.mat[14])/determinant;\n            \n        inverse.mat[13] = (this.mat[1]*this.mat[10]*this.mat[12] -\n            this.mat[2]*this.mat[9]*this.mat[12] +\n            this.mat[2]*this.mat[8]*this.mat[13] -\n            this.mat[0]*this.mat[10]*this.mat[13] -\n            this.mat[1]*this.mat[8]*this.mat[14] +\n            this.mat[0]*this.mat[9]*this.mat[14])/determinant;\n        \n        inverse.mat[14] = (this.mat[2]*this.mat[5]*this.mat[12] -\n            this.mat[1]*this.mat[6]*this.mat[12] -\n            this.mat[2]*this.mat[4]*this.mat[13] +\n            this.mat[0]*this.mat[6]*this.mat[13] +\n            this.mat[1]*this.mat[4]*this.mat[14] -\n            this.mat[0]*this.mat[5]*this.mat[14])/determinant;\n        \n        inverse.mat[15] = (this.mat[1]*this.mat[6]*this.mat[8] -\n            this.mat[2]*this.mat[5]*this.mat[8] +\n            this.mat[2]*this.mat[4]*this.mat[9] -\n            this.mat[0]*this.mat[6]*this.mat[9] -\n            this.mat[1]*this.mat[4]*this.mat[10] +\n            this.mat[0]*this.mat[5]*this.mat[10])/determinant;\n\n        return inverse;\n    }\n\n    invert(): void\n    {\n        const inverseMatrix = this.inverse();\n        this.copy(inverseMatrix);\n    }\n\n    transpose(): Matrix4\n    {\n        return Matrix4.fromRowMajor(\n            this.mat[0], this.mat[1], this.mat[2], this.mat[3],\n            this.mat[4], this.mat[5], this.mat[6], this.mat[7],\n            this.mat[8], this.mat[9], this.mat[10], this.mat[11],\n            this.mat[12], this.mat[13], this.mat[14], this.mat[15]\n        );\n    }\n\n    decompose(position: Vector3, rotation: Quaternion, scale: Vector3): void\n    {\n        position.setPositionFromMatrix(this);\n        scale.setScaleFromMatrix(this);\n\n        const rotationMatrix = new Matrix4();\n        rotationMatrix.mat[0] = this.mat[0] / scale.x;\n        rotationMatrix.mat[1] = this.mat[1] / scale.x;\n        rotationMatrix.mat[2] = this.mat[2] / scale.x;\n        rotationMatrix.mat[3] = 0;\n\n        rotationMatrix.mat[4] = this.mat[4] / scale.y;\n        rotationMatrix.mat[5] = this.mat[5] / scale.y;\n        rotationMatrix.mat[6] = this.mat[6] / scale.y;\n        rotationMatrix.mat[7] = 0;\n\n        rotationMatrix.mat[8] = this.mat[8] / scale.z;\n        rotationMatrix.mat[9] = this.mat[9] / scale.z;\n        rotationMatrix.mat[10] = this.mat[10] / scale.z;\n        rotationMatrix.mat[11] = 0;\n\n        rotationMatrix.mat[12] = 0;\n        rotationMatrix.mat[13] = 0;\n        rotationMatrix.mat[14] = 0;\n        rotationMatrix.mat[15] = 1;\n\n        rotation.setMatrix(rotationMatrix);\n    }\n}", "import { Matrix4 } from \"../math/Matrix4\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Camera } from \"./Camera\";\nimport { LightManager } from \"../lights/LightManager\";\n\nexport class Transform3\n{\n    public children: Array<Transform3>;\n\n    public position: Vector3;\n    public rotation: Quaternion;\n    public scale: Vector3;\n    public visible: boolean;\n\n    public autoUpdateMatrix: boolean;\n    public matrix: Matrix4;\n    public worldMatrix: Matrix4;\n\n    public worldPosition: Vector3;\n    public worldRotation: Quaternion;\n    public worldScale: Vector3;\n\n    public parent: Transform3 | null;\n\n    constructor()\n    {\n        this.children = [];\n        this.position = new Vector3();\n        this.rotation = new Quaternion();\n        this.scale = new Vector3(1, 1, 1);\n        this.visible = true;\n\n        this.autoUpdateMatrix = true;\n        this.matrix = new Matrix4();\n        this.worldMatrix = new Matrix4();\n\n        this.worldPosition = new Vector3();\n        this.worldRotation = new Quaternion();\n        this.worldScale = new Vector3();\n\n        this.parent = null;\n    }\n\n    draw(parent: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible)\n            return;\n\n        this.children.forEach((elem: Transform3) => {\n            elem.draw(this, camera, lightManager);\n        });\n    }\n\n    computeWorldTransform(): void\n    {\n        if(this.autoUpdateMatrix)\n        {\n            this.matrix.makeTransform(this.position, this.rotation, this.scale);\n        }\n        \n        if(this.parent)\n        {\n            this.worldMatrix.copy(this.parent.worldMatrix);\n            this.worldMatrix.multiply(this.matrix);\n        }\n        else\n        {\n            this.worldMatrix.copy(this.matrix);\n        }\n\n        this.worldMatrix.decompose(this.worldPosition, this.worldRotation, this.worldScale);\n\n        this.children.forEach((elem: Transform3) => {\n            elem.computeWorldTransform();\n        });\n    }\n\n    add(child: Transform3) \n    {\n        this.children.push(child);\n        child.parent = this;\n    }\n\n    remove(): boolean\n    {\n        if(this.parent == null)\n            return false;\n        else\n            return this.parent.removeChild(this) != null;\n    }\n\n    removeChild(child: Transform3): Transform3 | null\n    {\n        const index = this.children.indexOf(child);\n\n        if(index == -1)\n        {\n            return null;\n        }\n        else\n        {\n            const removedElement = this.children.splice(index, 1);\n            removedElement[0].parent = null;\n            return removedElement[0];\n        }\n    }\n\n    setLights(lightManager: LightManager): void\n    {\n        this.children.forEach((elem) => {\n            elem.setLights(lightManager);\n        });\n    }\n\n    translate(translation: Vector3): void\n    {\n        this.position.add(this.rotation.rotate(translation));\n    }\n\n    translateX(distance: number): void\n    {\n        this.position.add(this.rotation.rotate(new Vector3(distance, 0, 0)));\n    }\n\n    translateY(distance: number): void\n    {\n        this.position.add(this.rotation.rotate(new Vector3(0, distance, 0)));\n    }\n\n    translateZ(distance: number): void\n    {\n        this.position.add(this.rotation.rotate(new Vector3(0, 0, distance)));\n    }\n\n    // in local space\n    lookAt(target: Vector3, up = Vector3.UP): void\n    {\n        const rotationMatrix = Matrix4.lookAt(this.position, target, up);\n        this.rotation.setMatrix(rotationMatrix);\n    }\n}", "import { Transform3 } from './Transform3'\nimport { Matrix4 } from '../math/Matrix4'\n\nexport class Camera extends Transform3\n{\n    protected aspectRatio: number;\n    protected fov: number;\n    protected near: number;\n    protected far: number;\n    protected left: number;\n    protected right: number;\n    \n    public projectionMatrix: Matrix4;\n    public viewMatrix: Matrix4;\n    public projectionMatrixDirty: boolean;\n\n    constructor()\n    {\n        super();\n\n        this.fov = 0;\n        this.aspectRatio = 0;\n        this.near = 0;\n        this.far = 0;\n        this.left = 0;\n        this.right = 0;\n        this.projectionMatrixDirty = true;\n\n        this.projectionMatrix = new Matrix4();\n        this.viewMatrix = new Matrix4();\n    }\n\n    public setPerspectiveCamera(fov: number, aspectRatio: number, near: number, far: number): void\n    {\n        this.fov = fov;\n        this.aspectRatio = aspectRatio;\n        this.near = near;\n        this.far = far;\n        this.projectionMatrixDirty = true;\n\n        this.projectionMatrix.makePerspective(fov, aspectRatio, near, far);\n    }\n\n    public setOrthographicCamera(left: number, right: number, bottom: number, top: number, near: number, far: number): void\n    {\n        this.left = left;\n        this.right = right;\n        this.aspectRatio = Math.abs((right-left) / (top-bottom));\n        this.near = near;\n        this.far = far;\n        this.projectionMatrixDirty = true;\n\n        this.projectionMatrix.makeOrthographic(left, right, bottom, top, near, far);\n    }\n\n    public computeWorldTransform(): void\n    {\n        super.computeWorldTransform();\n        this.viewMatrix = this.worldMatrix.inverse();\n    }\n\n    public getAspectRatio(): number\n    {\n        return this.aspectRatio;\n    }\n\n    public getNear(): number\n    {\n        return this.near;\n    }\n\n    public getFar(): number\n    {\n        return this.far;\n    }\n\n    public getLeft(): number\n    {\n        return this.left;\n    }\n\n    public getRight(): number\n    {\n        return this.right;\n    }\n\n}", "import { Vector2 } from './Vector2'\n\nexport class Matrix3\n{\n    public static readonly IDENTITY = new Matrix3();\n\n    public mat: Array<number>;\n\n    // Code from https://webglfundamentals.org/webgl/lessons/webgl-2d-matrices.html\n    static multiply(m1: Matrix3, m2: Matrix3): Matrix3\n    {\n        const m = new Matrix3();\n        \n        m.mat[0] = m1.mat[0] * m2.mat[0] + m1.mat[1] * m2.mat[3] + m1.mat[2] * m2.mat[6];\n        m.mat[1] = m1.mat[0] * m2.mat[1] + m1.mat[1] * m2.mat[4] + m1.mat[2] * m2.mat[7];\n        m.mat[2] = m1.mat[0] * m2.mat[2] + m1.mat[1] * m2.mat[5] + m1.mat[2] * m2.mat[8];\n        m.mat[3] = m1.mat[3] * m2.mat[0] + m1.mat[4] * m2.mat[3] + m1.mat[5] * m2.mat[6];\n        m.mat[4] = m1.mat[3] * m2.mat[1] + m1.mat[4] * m2.mat[4] + m1.mat[5] * m2.mat[7];\n        m.mat[5] = m1.mat[3] * m2.mat[2] + m1.mat[4] * m2.mat[5] + m1.mat[5] * m2.mat[8];\n        m.mat[6] = m1.mat[6] * m2.mat[0] + m1.mat[7] * m2.mat[3] + m1.mat[8] * m2.mat[6];\n        m.mat[7] = m1.mat[6] * m2.mat[1] + m1.mat[7] * m2.mat[4] + m1.mat[8] * m2.mat[7];\n        m.mat[8] = m1.mat[6] * m2.mat[2] + m1.mat[7] * m2.mat[5] + m1.mat[8] * m2.mat[8];\n\n        return m;\n    }\n\n    static copy(m: Matrix3): Matrix3\n    {\n        const mat = new Matrix3();\n        mat.copy(m);\n        return mat;\n    }\n\n    public static fromRowMajor(n1: number, n2: number, n3: number,\n        n4: number, n5: number, n6: number, \n        n7: number, n8: number, n9: number): Matrix3\n    {\n        const matrix = new Matrix3();\n        matrix.setRowMajor(n1, n2, n3, n4, n5, n6, n7, n8, n9);\n        return matrix;\n    }\n\n    public static fromColumnMajor(n1: number, n2: number, n3: number,\n        n4: number, n5: number, n6: number, \n        n7: number, n8: number, n9: number): Matrix3\n    {\n        const matrix = new Matrix3();\n        matrix.setColumnMajor(n1, n2, n3, n4, n5, n6, n7, n8, n9);\n        return matrix;\n    }\n\n    public static makeTranslation(v: Vector2): Matrix3\n    {\n        return Matrix3.fromRowMajor(\n            1, 0, v.x,\n            0, 1, v.y,\n            0, 0, 1\n        );\n    }\n\n    public static makeRotation(angle: number): Matrix3\n    {\n        const matrix = new Matrix3();\n        matrix.makeRotation(angle);\n        return matrix;\n    }\n\n    public static makeScale(scale: Vector2): Matrix3\n    {\n        const matrix = new Matrix3();\n        matrix.makeScale(scale);\n        return matrix;\n    }\n\n    constructor()\n    {\n        this.mat = [ \n            1, 0, 0,\n            0, 1, 0,\n            0, 0, 1\n        ];\n    }\n\n    setColumnMajor(n1: number, n2: number, n3: number,\n        n4: number, n5: number, n6: number, \n        n7: number, n8: number, n9: number): void\n    {\n        this.mat[0] = n1;\n        this.mat[1] = n2;\n        this.mat[2] = n3;\n        this.mat[3] = n4;\n        this.mat[4] = n5;\n        this.mat[5] = n6;\n        this.mat[6] = n7;\n        this.mat[7] = n8;\n        this.mat[8] = n9;\n    }\n\n    setRowMajor(n1: number, n2: number, n3: number,\n        n4: number, n5: number, n6: number, \n        n7: number, n8: number, n9: number): void\n    {\n        this.mat[0] = n1;\n        this.mat[1] = n4;\n        this.mat[2] = n7;\n        this.mat[3] = n2;\n        this.mat[4] = n5;\n        this.mat[5] = n8;\n        this.mat[6] = n3;\n        this.mat[7] = n6;\n        this.mat[8] = n9;\n    }\n\n    copy(m: Matrix3): void\n    {\n        for(let i=0; i < 9; i++)\n            this.mat[i] = m.mat[i];\n    }\n\n    element(row: number, col: number): number\n    {\n        return this.mat[col*3 + row];\n    }\n\n    set(value: number, row: number, col: number): void\n    {\n       this.mat[col*3 + row] = value;\n    }\n\n    multiply(m: Matrix3): void\n    {\n        const temp = Matrix3.multiply(m, this);\n        this.copy(temp);\n    }\n\n    makeTranslation(v: Vector2): void\n    { \n        this.setRowMajor(\n            1, 0, v.x,\n            0, 1, v.y,\n            0, 0, 1\n        );\n    }\n\n    makeRotation(angle: number): void\n    {\n        const cosTheta = Math.cos(angle);\n        const sinTheta = Math.sin(angle);\n        \n        this.setRowMajor(\n            cosTheta, -sinTheta, 0,\n            sinTheta, cosTheta, 0,\n            0, 0, 1\n        );\n    }\n\n    makeScale(scale: Vector2): void\n    {\n        this.setRowMajor(\n            scale.x, 0, 0,\n            0, scale.y, 0,\n            0, 0, 1 \n        );\n    }\n\n    makeTransform(position = Vector2.ZERO, rotation = 0, scale = Vector2.ONE): void\n    {\n        this.makeTranslation(position);\n        this.multiply(Matrix3.makeRotation(rotation));\n        this.multiply(Matrix3.makeScale(scale));\n    }\n\n    multiplyScalar(x: number): void\n    {\n        for(let i=0; i < 9; i++)\n            this.mat[i] *= x;\n    }\n\n    // Code from http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/threeD/index.htm\n    inverse(): Matrix3\n    {\n        const inverse = new Matrix3();\n\n        const det = this.mat[0]*this.mat[4]*this.mat[8] + \n            this.mat[1]*this.mat[5]*this.mat[6] + \n            this.mat[2]*this.mat[3]*this.mat[7] - \n            this.mat[0]*this.mat[5]*this.mat[7] -\n             this.mat[1]*this.mat[3]*this.mat[8] - \n             this.mat[2]*this.mat[4]*this.mat[6];\n\n        this.mat[0] = (this.mat[4]*this.mat[8] - this.mat[5]*this.mat[7])/det;\n        this.mat[1] = (this.mat[2]*this.mat[7] - this.mat[1]*this.mat[8])/det;\n        this.mat[2] = (this.mat[1]*this.mat[5] - this.mat[2]*this.mat[4])/det;\n        this.mat[3] = (this.mat[5]*this.mat[6] - this.mat[3]*this.mat[8])/det;\n        this.mat[4] = (this.mat[0]*this.mat[8] - this.mat[2]*this.mat[6])/det;\n        this.mat[5] = (this.mat[2]*this.mat[3] - this.mat[0]*this.mat[5])/det;\n        this.mat[6] = (this.mat[3]*this.mat[7] - this.mat[4]*this.mat[6])/det;\n        this.mat[7] = (this.mat[1]*this.mat[6] - this.mat[0]*this.mat[7])/det;\n        this.mat[8] = (this.mat[0]*this.mat[4] - this.mat[1]*this.mat[3])/det;\n\n        return inverse;\n    }\n\n    invert(): void\n    {\n        const inverseMatrix = this.inverse();\n        this.copy(inverseMatrix);\n    }\n\n    transpose(): Matrix3\n    {\n        return Matrix3.fromRowMajor(\n            this.mat[0], this.mat[1], this.mat[2], \n            this.mat[3], this.mat[4], this.mat[5], \n            this.mat[6], this.mat[7], this.mat[8]\n        );\n    }\n\n    decompose(): [Vector2, number, Vector2]\n    {\n        const position = new Vector2();\n        const scale = new Vector2();\n        \n        position.setPositionFromMatrix(this);\n        scale.setScaleFromMatrix(this);\n\n        return [position, Math.atan2(this.mat[1], this.mat[3]), scale];\n    }\n}", "import { Matrix3 } from \"./Matrix3\";\nimport { Vector2 } from \"./Vector2\"\n\nexport class BoundingBox2 \n{\n    public min: Vector2;\n    public max: Vector2;\n\n    constructor()\n    {\n        this.min = new Vector2();\n        this.max = new Vector2();\n    }\n\n    copy(box: BoundingBox2): void\n    {\n        this.min.copy(box.min);\n        this.max.copy(box.max);\n    }\n\n    transform(translation: Vector2, rotation: number, scale: Vector2)\n    {\n        this.min.multiply(scale);\n        this.max.multiply(scale);\n        \n        const topLeft = new Vector2(this.min.x, this.max.y);\n        const topRight = new Vector2(this.max.x, this.max.y);\n        const bottomLeft = new Vector2(this.min.x, this.min.y);\n        const bottomRight = new Vector2(this.max.x, this.min.y);\n        topLeft.rotate(rotation);\n        topRight.rotate(rotation);\n        bottomLeft.rotate(rotation);\n        bottomRight.rotate(rotation);\n\n        this.min.x = Math.min(topLeft.x, Math.min(topRight.x, Math.min(bottomLeft.x, bottomRight.x)));\n        this.min.y = Math.min(topLeft.y, Math.min(topRight.y, Math.min(bottomLeft.y, bottomRight.y)));\n        this.max.x = Math.max(topLeft.x, Math.max(topRight.x, Math.max(bottomLeft.x, bottomRight.x)));\n        this.max.y = Math.max(topLeft.y, Math.max(topRight.y, Math.max(bottomLeft.y, bottomRight.y)));\n\n        this.min.add(translation);\n        this.max.add(translation);\n    }\n\n    intersects(box: BoundingBox2): boolean\n    {\n        const thisCenter = Vector2.add(this.max, this.min);\n        thisCenter.multiplyScalar(0.5);\n\n        const otherCenter = Vector2.add(box.max, box.min);\n        otherCenter.multiplyScalar(0.5);\n\n        const thisHalfWidth = Vector2.subtract(this.max, this.min);\n        thisHalfWidth.multiplyScalar(0.5);\n\n        const otherHalfWidth = Vector2.subtract(box.max, box.min);\n        otherHalfWidth.multiplyScalar(0.5);\n\n        if(Math.abs(thisCenter.x - otherCenter.x) > (thisHalfWidth.x + otherHalfWidth.x))\n            return false;\n        else if(Math.abs(thisCenter.y - otherCenter.y) > (thisHalfWidth.y + otherHalfWidth.y))\n            return false;\n        else\n            return true;\n    }\n}", "import { Vector2 } from \"./Vector2\"\n\nexport class BoundingCircle \n{\n    public center: Vector2;\n    public radius: number;\n\n    constructor()\n    {\n        this.center = new Vector2();\n        this.radius = 0;\n    }\n\n    copy(circle: BoundingCircle): void\n    {\n        this.center.copy(circle.center);\n        this.radius = circle.radius;\n    }\n\n    transform(translation: Vector2, scale: Vector2)\n    {\n        this.center.multiply(scale);\n        this.center.add(translation);\n        \n        if(scale.x >= scale.y)\n            this.radius *= scale.x;\n        else\n            this.radius *= scale.y;\n    }\n\n    intersects(circle: BoundingCircle): boolean\n    {\n        const distance = this.center.distanceTo(circle.center);\n\n        if(distance < (this.radius + circle.radius))\n            return true;\n        else\n            return false;\n    }\n}", "import { Matrix3 } from \"../math/Matrix3\";\nimport { Vector2 } from \"../math/Vector2\";\nimport { BoundingBox2 } from \"../math/BoundingBox2\";\nimport { BoundingCircle } from \"../math/BoundingCircle\";\n\nexport enum IntersectionMode2\n{\n    BOUNDING_CIRCLE,\n    AXIS_ALIGNED_BOUNDING_BOX\n}\n\nexport class Transform2\n{\n    public children: Array<Transform2>;\n    public parent: Transform2 | null;\n\n    public position: Vector2;\n    public rotation: number;\n    public scale: Vector2;\n    public matrix: Matrix3;\n    public layer: number;\n\n    public worldPosition: Vector2;\n    public worldRotation: number;\n    public worldScale: Vector2;\n    public worldMatrix: Matrix3;\n    \n    public visible: boolean;\n\n    public boundingBox: BoundingBox2;\n    public boundingCircle: BoundingCircle;\n\n    constructor()\n    {\n        this.children = [];\n\n        this.position = new Vector2();\n        this.rotation = 0;\n        this.scale = new Vector2(1, 1);\n        this.matrix = new Matrix3();\n\n        this.worldPosition = new Vector2();\n        this.worldRotation = 0;\n        this.worldScale = new Vector2(1, 1);\n        this.worldMatrix = new Matrix3();\n\n        // default layer\n        this.layer = 0;\n\n        this.visible = true;\n\n        this.parent = null;\n\n        this.boundingBox = new BoundingBox2();\n        this.boundingCircle = new BoundingCircle();\n    }\n\n    draw(parent: Transform2): void\n    {\n        if(!this.visible)\n            return;\n\n        this.children.forEach((elem: Transform2) => {\n            elem.draw(this);\n        });\n    }\n\n    computeWorldTransform(): void\n    {\n        \n        this.matrix.makeTransform(this.position, this.rotation, this.scale);\n\n        if(this.parent)\n        {\n            this.worldMatrix.copy(this.parent.worldMatrix);\n            this.worldMatrix.multiply(this.matrix);\n        }\n        else\n        {\n            this.worldMatrix.copy(this.matrix);\n        }\n\n        [this.worldPosition, this.worldRotation, this.worldScale] = this.worldMatrix.decompose();\n\n        this.children.forEach((elem: Transform2) => {\n            elem.computeWorldTransform();\n        });\n    }\n\n    add(child: Transform2) \n    {\n        this.children.push(child);\n        child.parent = this;\n    }\n\n    remove(): boolean\n    {\n        if(this.parent == null)\n            return false;\n        else\n            return this.parent.removeChild(this) != null;\n    }\n\n    removeChild(child: Transform2): Transform2 | null\n    {\n        const index = this.children.indexOf(child);\n\n        if(index == -1)\n        {\n            return null;\n        }\n        else\n        {\n            const removedElement = this.children.splice(index, 1);\n            removedElement[0].parent = null;\n            return removedElement[0];\n        }\n    }\n\n    translate(translation: Vector2): void\n    {\n        const localVector = Vector2.rotate(translation, this.rotation);\n        this.position.add(localVector);\n    }\n\n    translateX(distance: number): void\n    {\n        const localVector = Vector2.rotate(new Vector2(distance, 0), this.rotation);\n        this.position.add(localVector);\n    }\n\n    translateY(distance: number): void\n    {\n        const localVector = Vector2.rotate(new Vector2(0, distance), this.rotation);\n        this.position.add(localVector);\n    }\n\n    // in local space\n    lookAt(target: Vector2, lookVector = Vector2.UP): void\n    {\n        const targetVector = Vector2.subtract(target, this.position);\n        if(targetVector.length() > 0)\n        {\n            this.rotation = lookVector.angleBetweenSigned(targetVector);\n        }\n    }\n\n    intersects(other: Transform2, mode = IntersectionMode2.BOUNDING_CIRCLE): boolean\n    {\n        if(mode == IntersectionMode2.BOUNDING_CIRCLE)\n        {\n            const thisCircle = new BoundingCircle();\n            thisCircle.copy(this.boundingCircle);\n            thisCircle.transform(this.position, this.scale);\n\n            const otherCircle = new BoundingCircle();\n            otherCircle.copy(other.boundingCircle);\n            otherCircle.transform(other.position, other.scale);\n\n            return thisCircle.intersects(otherCircle);\n        }\n        else if(mode == IntersectionMode2.AXIS_ALIGNED_BOUNDING_BOX)\n        {\n            const thisBox = new BoundingBox2();\n            thisBox.copy(this.boundingBox);\n            thisBox.transform(this.position, this.rotation, this.scale);\n\n            const otherBox = new BoundingBox2();\n            otherBox.copy(other.boundingBox);\n            otherBox.transform(other.position, other.rotation, other.scale);\n\n            return thisBox.intersects(otherBox);\n        }\n        else\n        {\n            return false;\n        }\n    }\n}", "import { Light } from './Light'\nimport { Vector3 } from '../math/Vector3';\n\nexport class LightManager\n{\n    public lights: Light[];\n    public lightTypes: number[];\n    public lightPositions: number[];\n    public ambientIntensities: number[];\n    public diffuseIntensities: number[];\n    public specularIntensities: number[];\n\n    constructor()\n    {\n        this.lights = [];\n        this.lightTypes = [];\n        this.lightPositions = [];\n        this.ambientIntensities = [];\n        this.diffuseIntensities = [];\n        this.specularIntensities = [];\n    }\n\n    clear(): void\n    {\n        this.lights = [];\n        this.lightTypes = [];\n        this.lightPositions = [];\n        this.ambientIntensities = [];\n        this.diffuseIntensities = [];\n        this.specularIntensities = [];\n    }\n\n    addLight(light: Light): void\n    {\n        const alreadyAdded = this.lights.some((elem: Light)=>{\n            return elem==light;\n        });\n\n        if(!alreadyAdded)\n            this.lights.push(light)\n    }\n\n    getNumLights(): number\n    {\n        return this.lights.length;\n    }\n\n    updateLights(): void\n    {\n        this.lights.forEach((light: Light) => {\n            if(light.visible)\n            {\n                this.lightPositions.push(light.worldPosition.x, light.worldPosition.y, light.worldPosition.z);\n\n                this.lightTypes.push(light.getType());\n                this.ambientIntensities.push(light.ambientIntensity.r, light.ambientIntensity.g, light.ambientIntensity.b);\n                this.diffuseIntensities.push(light.diffuseIntensity.r, light.diffuseIntensity.g, light.diffuseIntensity.b);\n                this.specularIntensities.push(light.specularIntensity.r, light.specularIntensity.g, light.specularIntensity.b);\n            }\n            else\n            {\n                this.lightPositions.push(light.worldPosition.x, light.worldPosition.y, light.worldPosition.z);\n\n                this.lightTypes.push(light.getType());\n                this.ambientIntensities.push(0, 0, 0);\n                this.diffuseIntensities.push(0, 0, 0);\n                this.specularIntensities.push(0, 0, 0);\n            }\n        });\n    }\n}", "import { Camera } from \"./Camera\";\nimport { Transform2 } from \"./Transform2\";\nimport { Transform3 } from \"./Transform3\";\nimport { LightManager } from \"../lights/LightManager\";\n\nexport class Scene\n{\n    public root3d: Transform3;\n    public root2d: Transform2;\n    private lightManager: LightManager;\n    \n    constructor()\n    {\n        this.root3d = new Transform3();\n        this.root2d = new Transform2();\n        this.lightManager = new LightManager();\n    }\n\n    draw(camera: Camera): void\n    {\n        // Make sure the camera world transform is computed\n        camera.computeWorldTransform();\n\n        // Compute the world transforms for all objects in the scene graph\n        this.computeWorldTransforms();\n\n        // Update the scene lights\n        this.lightManager.clear();\n        this.root3d.setLights(this.lightManager);\n        this.lightManager.updateLights();\n\n        this.root3d.children.forEach((elem: Transform3) => {\n            elem.draw(this.root3d, camera, this.lightManager);\n        });\n\n        this.root2d.children.forEach((elem: Transform2) => {\n            elem.draw(this.root2d);\n        });\n    }\n\n    add(child: Transform2 | Transform3): void\n    {\n        if(child instanceof Transform3)\n        {\n            this.root3d.add(child);\n        }\n        else\n        {\n            this.root2d.add(child);\n        }\n    }\n\n    computeWorldTransforms(): void\n    {\n        this.root3d.children.forEach((elem: Transform3) => {\n            elem.computeWorldTransform();\n        });\n\n        this.root2d.children.forEach((elem: Transform2) => {\n            elem.computeWorldTransform();\n        });\n    }\n}", "export class AssetManager\n{\n    public requestedAssets: string[];\n    public loadedAssets: string[];\n    public errorAssets: string[];\n\n    constructor()\n    {\n        this.requestedAssets = [];\n        this.loadedAssets = [];\n        this.errorAssets = [];\n    }\n\n    allAssetsLoaded(): boolean\n    {\n        return this.requestedAssets.length == (this.loadedAssets.length + this.errorAssets.length);\n    }\n}", "import { Renderer } from './Renderer'\nimport { Camera } from './Camera'\nimport { Scene } from './Scene';\nimport { Vector2 } from '../math/Vector2'\nimport { AssetManager } from '../loaders/AssetManager';\n\nexport abstract class GfxApp \n{\n    private static instance: GfxApp;\n    \n    public static getInstance(): GfxApp\n    {\n        return GfxApp.instance;\n    }\n\n    public renderer: Renderer;\n    public camera: Camera;\n    public scene: Scene;\n    public assetManager: AssetManager;\n    public runInBackground: boolean;\n    public waitForAssetLoading: boolean;\n\n    private time: number;\n    private paused: boolean;\n    private previousTouches: Vector2[];\n\n    constructor()\n    {\n        GfxApp.instance = this;\n\n        this.time = Date.now();\n        this.paused = false;\n\n        this.camera = new Camera();\n        this.scene = new Scene();\n        this.renderer = new Renderer();\n        this.assetManager = new AssetManager();\n        this.runInBackground = false;\n        this.waitForAssetLoading = true;\n\n        this.previousTouches = [ new Vector2() ];\n  \n        // Register event handlers\n        window.addEventListener('resize', () => {this.resize()}, false);\n        window.addEventListener('mousedown', (event: MouseEvent) => {this.onMouseDown(event)});\n        window.addEventListener('mouseup', (event: MouseEvent) => {this.onMouseUp(event)});\n        window.addEventListener('mousemove', (event: MouseEvent) => {this.onMouseMove(event)});\n        window.addEventListener('wheel', (event: WheelEvent) => {this.onMouseWheel(event)});\n        window.addEventListener('keydown', (event: KeyboardEvent) => {this.onKeyDown(event)});\n        window.addEventListener('keyup', (event: KeyboardEvent) => {this.onKeyUp(event)});  \n        window.addEventListener('focus', (event: FocusEvent) => {this.onFocusReceived(event)});\n        window.addEventListener('blur', (event: FocusEvent) => {this.onFocusLost(event)});\n        window.addEventListener('touchstart', (event: TouchEvent) => {this.onTouchStart(event)}, {passive: false});\n        window.addEventListener('touchmove', (event: TouchEvent) => {this.onTouchMove(event)}, {passive: false});\n        window.addEventListener('touchend', (event: TouchEvent) => {this.onTouchEnd(event)}, {passive: false});\n        window.addEventListener('contextmenu', event => event.preventDefault());\n\n        // default orthographic camera\n        this.camera.setOrthographicCamera(0, 1, 0, 1, 0.01, 1);\n    }\n\n    // Create the scene and enter the main loop\n    start(): void \n    {\n        if(this.waitForAssetLoading && !this.assetManager.allAssetsLoaded())\n        {\n            window.requestAnimationFrame(() => this.start());\n        }\n        else\n        {\n            this.createScene();\n            this.mainLoop();\n        }\n    }\n\n    // This starts the main loop of the game\n    private mainLoop(): void\n    {\n        if(this.runInBackground || !this.paused)\n        {\n            // Update the app\n            this.update((Date.now() - this.time) / 1000);\n            this.time = Date.now();\n        }\n\n        // Draw the graphics\n        this.renderer.render(this.scene, this.camera);\n\n        // Run the main loop function on the next frame\n        window.requestAnimationFrame(() => this.mainLoop());\n    }\n\n    // Resize the viewport\n    resize(): void\n    {\n        this.renderer.resize(window.innerWidth, window.innerHeight, this.camera.getAspectRatio());\n    }\n\n    // Create a simulated mouse event for touch input\n    onTouchStart(event: TouchEvent): void\n    {\n        event.preventDefault();\n        if(event.touches.length == 1)\n            this.simulateMouseEvent('mousedown', event);\n    }\n\n    // Create a simulated mouse event for touch input\n    onTouchMove(event: TouchEvent): void\n    {\n        event.preventDefault();\n        if(event.touches.length == 1)\n            this.simulateMouseEvent('mousemove', event);\n        else\n            this.simulateWheelEvent(event);\n    }\n\n    // Create a simulated mouse event for touch input\n    onTouchEnd(event: TouchEvent): void\n    {\n        event.preventDefault();\n        if(event.touches.length == 1)\n            this.simulateMouseEvent('mouseup', event);\n    }\n\n    onFocusReceived(event: FocusEvent): void \n    {\n        this.resume();\n    }\n\n    onFocusLost(event: FocusEvent): void \n    {\n        this.pause();\n    }\n\n    pause(): void\n    {\n        this.paused = true;\n    }\n\n    resume(): void\n    {\n        this.time = Date.now();\n        this.paused = false;\n    }\n\n    isPaused(): boolean\n    {\n        return this.paused;\n    }\n\n    getNormalizedDeviceCoordinates(mouseX: number, mouseY: number): Vector2\n    {\n        return this.renderer.getNormalizedDeviceCoordinates(mouseX, mouseY);\n    }\n\n    private simulateMouseEvent(type: string, touchEvent: TouchEvent): void\n    {\n        if(this.previousTouches.length == 1)\n        {\n            const mouseEvent = new MouseEvent(type, {\n                'button': 0,\n                'clientX': touchEvent.touches[0].clientX, \n                'clientY': touchEvent.touches[0].clientY,\n                'screenX': touchEvent.touches[0].screenX,\n                'screenY': touchEvent.touches[0].screenY,\n                'movementX': touchEvent.touches[0].clientX - this.previousTouches[0].x,\n                'movementY': touchEvent.touches[0].clientY - this.previousTouches[0].y,\n                'view': touchEvent.view,\n                cancelable: true,\n                bubbles: true,\n            });\n\n            touchEvent.target!.dispatchEvent(mouseEvent);\n        }\n\n        this.previousTouches = [ new Vector2(touchEvent.touches[0].clientX, touchEvent.touches[0].clientY) ];\n    }\n\n    private simulateWheelEvent(touchEvent: TouchEvent): void\n    {\n        if(this.previousTouches.length > 1)\n        {\n            const previousDistance = this.previousTouches[0].distanceTo(this.previousTouches[1]);\n            const currentDistance = Math.sqrt(\n                (touchEvent.touches[0].clientX -  touchEvent.touches[1].clientX) * (touchEvent.touches[0].clientX -  touchEvent.touches[1].clientX) +\n                (touchEvent.touches[0].clientY -  touchEvent.touches[1].clientY) * (touchEvent.touches[0].clientY -  touchEvent.touches[1].clientY)\n            );\n            \n            let scaleFactor = 0;\n            if(currentDistance > previousDistance)\n                scaleFactor = -currentDistance / previousDistance;\n            else if(currentDistance < previousDistance)\n                scaleFactor = previousDistance / currentDistance;\n\n            const wheelEvent = new WheelEvent('wheel', {\n                'clientX': (touchEvent.touches[0].clientX + touchEvent.touches[1].clientX) / 2, \n                'clientY': (touchEvent.touches[0].clientY + touchEvent.touches[1].clientY) / 2,\n                'screenX': (touchEvent.touches[0].screenX + touchEvent.touches[1].screenX) / 2,\n                'screenY': (touchEvent.touches[0].screenY + touchEvent.touches[1].screenY) / 2,\n                'movementX': (\n                    (touchEvent.touches[0].clientX - this.previousTouches[0].x) + \n                    (touchEvent.touches[1].clientX - this.previousTouches[1].x) ) / 2,\n                'movementY': (\n                    (touchEvent.touches[0].clientY - this.previousTouches[0].y) + \n                    (touchEvent.touches[1].clientY - this.previousTouches[1].y) ) / 2,\n                'deltaX': 0,\n                'deltaY': 50 * scaleFactor,\n                'deltaZ': 0,\n                'deltaMode': WheelEvent.DOM_DELTA_PIXEL,\n                'view': touchEvent.view,\n                cancelable: true,\n                bubbles: true,\n            });\n\n            touchEvent.target!.dispatchEvent(wheelEvent);\n        }  \n\n        this.previousTouches = [];\n        for(let i = 0; i < touchEvent.changedTouches.length; i++)\n        {\n            this.previousTouches.push(new Vector2(touchEvent.touches[i].clientX, touchEvent.touches[i].clientY));\n        }   \n    }\n\n    // Your app should implement the following abstract methods\n    abstract createScene(): void;\n    abstract update(deltaTime: number): void;\n\n    // Subclasses can override these methods to handle events\n    onMouseDown(event: MouseEvent): void {}\n    onMouseUp(event: MouseEvent): void {}\n    onMouseMove(event: MouseEvent): void {}\n    onMouseWheel(event: WheelEvent): void {}\n    onKeyDown(event: KeyboardEvent): void {}\n    onKeyUp(event: KeyboardEvent): void {}\n}", "import { GfxApp } from '../core/GfxApp';\nimport { Mesh } from '../geometry/3d/Mesh';\nimport { Camera } from '../core/Camera';\nimport { Transform3 } from '../core/Transform3';\nimport { LightManager } from '../lights/LightManager';\n\nexport enum Side\n{\n    FRONT,\n    BACK,\n    DOUBLE\n}\n\nexport abstract class Material3\n{\n    public visible: boolean;\n    public side: Side;\n\n    protected readonly gl: WebGL2RenderingContext;\n\n    constructor()\n    {\n        this.visible = true;\n        this.side = Side.FRONT;\n        this.gl  = GfxApp.getInstance().renderer.gl;\n    }\n\n    protected initialize(): void\n    {\n        if(this.side == Side.DOUBLE)\n        {\n            this.gl.disable(this.gl.CULL_FACE);\n            return;\n        }\n\n        this.gl.enable(this.gl.CULL_FACE);\n\n        if(this.side == Side.FRONT)\n             this.gl.cullFace(this.gl.BACK);\n        else\n            this.gl.cullFace(this.gl.FRONT);\n    }\n\n    abstract draw(object: Mesh, transform: Transform3, camera: Camera, lightManager: LightManager): void; \n}", "export class ShaderProgram\n{\n    private vertexShader: WebGLShader | null;\n    private fragmentShader: WebGLShader | null;\n    private shaderProgram: WebGLProgram | null;\n    private vertexSource: string;\n    private fragmentSource: string;\n\n    public initialized: boolean;\n\n    constructor(vertexSource: string, fragmentSource: string)\n    {\n        this.vertexSource = vertexSource;\n        this.fragmentSource = fragmentSource;\n        this.vertexShader = null;\n        this.fragmentShader = null;\n        this.shaderProgram = null;\n        this.initialized = false;\n    }\n\n    public initialize(gl: WebGL2RenderingContext): void \n    {\n        if(this.initialized)\n            return;\n\n        this.initialized = true;\n\n        this.vertexShader = this.createVertexShader(gl, this.vertexSource);\n        this.fragmentShader = this.createFragmentShader(gl, this.fragmentSource);\n\n        if(this.vertexShader && this.fragmentShader)\n            this.shaderProgram = this.createShaderProgram(gl, this.vertexShader, this.fragmentShader); \n    }\n\n    private createVertexShader(gl: WebGL2RenderingContext, source: string): WebGLShader | null \n    {\n        const shader = gl.createShader(gl.VERTEX_SHADER);\n\n        if(!shader)\n        {\n            console.error('Error: unable to create vertex shader');\n        }\n        else\n        {\n            gl.shaderSource(shader, source);\n            gl.compileShader(shader);\n\n            if(!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n            {\n                 console.error('Error: unable to load vertex shader');\n                 console.error(gl.getShaderInfoLog(shader));\n            }\n        }\n\n        return shader;\n    }\n\n    private createFragmentShader(gl: WebGL2RenderingContext, source: string): WebGLShader | null  \n    {\n        const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n        if(!shader)\n        {\n            console.error('Error: unable to create fragment shader');\n        }\n        else\n        {\n            gl.shaderSource(shader, source);\n            gl.compileShader(shader);\n\n            if(!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n            {\n                 console.error('Error: unable to load fragment shader');\n                 console.error(gl.getShaderInfoLog(shader));\n            }\n        }\n\n        return shader;\n    }\n\n    private createShaderProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram | null\n    {\n        let program: WebGLShader | null = null;\n\n        if(vertexShader && fragmentShader)\n        {\n            program = gl.createProgram();\n\n            if(!program)\n            {\n                console.error(\"Error: could not create shader program\");\n                return null;\n            }\n            \n\n            gl.attachShader(program, vertexShader);\n            gl.attachShader(program, fragmentShader);\n            gl.linkProgram(program);\n\n            if(!gl.getProgramParameter(program, gl.LINK_STATUS))\n            {\n                console.error(\"Error: could not link shader program\");\n                console.error(gl.getProgramInfoLog(program));\n                return null;\n            }\n        }\n\n        return program;\n    }\n\n    public getProgram(): WebGLProgram | null\n    {\n        return this.shaderProgram;\n    }\n\n    public getAttribute(gl: WebGL2RenderingContext, attribute: string): number\n    {\n        if(this.shaderProgram)\n            return gl.getAttribLocation(this.shaderProgram, attribute);\n        else\n            return -1;\n    }\n\n    public getUniform(gl: WebGL2RenderingContext, uniform: string): WebGLUniformLocation | null\n    {\n        \n        if(this.shaderProgram)\n            return gl.getUniformLocation(this.shaderProgram, uniform);\n        else\n            return null;\n    }\n}", "// @ts-ignore\nimport gouraudVertexShader from '../shaders/gouraud.vert'\n// @ts-ignore\nimport gouraudFragmentShader from '../shaders/gouraud.frag'\n\nimport { Material3 } from './Material3';\nimport { ShaderProgram } from './ShaderProgram';\nimport { Mesh } from '../geometry/3d/Mesh';\nimport { Camera } from '../core/Camera';\nimport { Transform3 } from '../core/Transform3';\nimport { LightManager } from '../lights/LightManager';\nimport { Texture } from './Texture';\nimport { Vector3 } from '../math/Vector3'\nimport { Color } from '../math/Color' \n\nexport class GouraudMaterial extends Material3\n{\n    public texture: Texture | null;\n    public ambientColor: Color;\n    public diffuseColor: Color;\n    public specularColor: Color;\n    public shininess: number;\n\n    private static shader = new ShaderProgram(gouraudVertexShader, gouraudFragmentShader);\n\n    private kAmbientUniform: WebGLUniformLocation | null;\n    private kDiffuseUniform: WebGLUniformLocation | null;\n    private kSpecularUniform: WebGLUniformLocation | null;\n    private shininessUniform: WebGLUniformLocation | null;\n    \n    private textureUniform: WebGLUniformLocation | null;\n    private useTextureUniform: WebGLUniformLocation | null;\n\n    private eyePositionUniform: WebGLUniformLocation | null;\n    private modelUniform: WebGLUniformLocation | null;\n    private viewUniform: WebGLUniformLocation | null;\n    private projectionUniform: WebGLUniformLocation | null;\n    private normalUniform: WebGLUniformLocation | null;\n\n    private numLightsUniform: WebGLUniformLocation | null;\n    private lightTypesUniform: WebGLUniformLocation | null;\n    private lightPositionsUniform: WebGLUniformLocation | null;\n    private ambientIntensitiesUniform: WebGLUniformLocation | null;\n    private diffuseIntensitiesUniform: WebGLUniformLocation | null;\n    private specularIntensitiesUniform: WebGLUniformLocation | null;\n\n    private positionAttribute: number;\n    private normalAttribute: number;\n    private colorAttribute: number;\n    private texCoordAttribute: number;\n\n    constructor()\n    {\n        super();\n\n        this.texture = null;\n        this.ambientColor = new Color(1, 1, 1);\n        this.diffuseColor = new Color(1, 1, 1);\n        this.specularColor = new Color(0, 0, 0);\n        this.shininess = 30;\n\n        GouraudMaterial.shader.initialize(this.gl);\n\n        this.kAmbientUniform = GouraudMaterial.shader.getUniform(this.gl, 'kAmbient');\n        this.kDiffuseUniform = GouraudMaterial.shader.getUniform(this.gl, 'kDiffuse');\n        this.kSpecularUniform = GouraudMaterial.shader.getUniform(this.gl, 'kSpecular');\n        this.shininessUniform = GouraudMaterial.shader.getUniform(this.gl, 'shininess');\n\n        this.textureUniform = GouraudMaterial.shader.getUniform(this.gl, 'textureImage');\n        this.useTextureUniform = GouraudMaterial.shader.getUniform(this.gl, 'useTexture');\n\n        this.eyePositionUniform = GouraudMaterial.shader.getUniform(this.gl, 'eyePosition');\n        this.viewUniform = GouraudMaterial.shader.getUniform(this.gl, 'viewMatrix');\n        this.modelUniform = GouraudMaterial.shader.getUniform(this.gl, 'modelMatrix');\n        this.projectionUniform = GouraudMaterial.shader.getUniform(this.gl, 'projectionMatrix');\n        this.normalUniform = GouraudMaterial.shader.getUniform(this.gl, 'normalMatrix');\n\n        this.numLightsUniform = GouraudMaterial.shader.getUniform(this.gl, 'numLights');\n        this.lightTypesUniform = GouraudMaterial.shader.getUniform(this.gl, 'lightTypes');\n        this.lightPositionsUniform = GouraudMaterial.shader.getUniform(this.gl, 'lightPositions');\n        this.ambientIntensitiesUniform = GouraudMaterial.shader.getUniform(this.gl, 'ambientIntensities');\n        this.diffuseIntensitiesUniform = GouraudMaterial.shader.getUniform(this.gl, 'diffuseIntensities');\n        this.specularIntensitiesUniform = GouraudMaterial.shader.getUniform(this.gl, 'specularIntensities');\n\n        this.positionAttribute = GouraudMaterial.shader.getAttribute(this.gl, 'position');\n        this.normalAttribute = GouraudMaterial.shader.getAttribute(this.gl, 'normal');\n        this.colorAttribute = GouraudMaterial.shader.getAttribute(this.gl, 'color');\n        this.texCoordAttribute = GouraudMaterial.shader.getAttribute(this.gl, 'texCoord');   \n    }\n\n    draw(mesh: Mesh, transform: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible || mesh.triangleCount == 0)\n            return;\n\n        this.initialize();\n\n        // Switch to this shader\n        this.gl.useProgram(GouraudMaterial.shader.getProgram());\n\n        // Set the camera uniforms\n        const cameraPosition = new Vector3();\n        cameraPosition.applyMatrix(camera.worldMatrix);\n        this.gl.uniform3f(this.eyePositionUniform, cameraPosition.x, cameraPosition.y, cameraPosition.z);\n        this.gl.uniformMatrix4fv(this.modelUniform, false, transform.worldMatrix.mat);\n        this.gl.uniformMatrix4fv(this.viewUniform, false, camera.viewMatrix.mat);\n        this.gl.uniformMatrix4fv(this.projectionUniform, false, camera.projectionMatrix.mat);\n        this.gl.uniformMatrix4fv(this.normalUniform, false, transform.worldMatrix.inverse().transpose().mat);\n\n        // Set the material property uniforms\n        this.gl.uniform3f(this.kAmbientUniform, this.ambientColor.r, this.ambientColor.g, this.ambientColor.b);\n        this.gl.uniform3f(this.kDiffuseUniform, this.diffuseColor.r, this.diffuseColor.g, this.diffuseColor.b);\n        this.gl.uniform3f(this.kSpecularUniform,this.specularColor.r, this.specularColor.g, this.specularColor.b);\n        this.gl.uniform1f(this.shininessUniform, this.shininess);\n\n        // Set the light uniforms\n        this.gl.uniform1i(this.numLightsUniform, lightManager.getNumLights());\n        this.gl.uniform1iv(this.lightTypesUniform, lightManager.lightTypes);\n        this.gl.uniform3fv(this.lightPositionsUniform, lightManager.lightPositions);\n        this.gl.uniform3fv(this.ambientIntensitiesUniform, lightManager.ambientIntensities);\n        this.gl.uniform3fv(this.diffuseIntensitiesUniform, lightManager.diffuseIntensities);\n        this.gl.uniform3fv(this.specularIntensitiesUniform, lightManager.specularIntensities);\n\n        // Set the vertex positions\n        this.gl.enableVertexAttribArray(this.positionAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.positionBuffer);\n        this.gl.vertexAttribPointer(this.positionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex normals\n        this.gl.enableVertexAttribArray(this.normalAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.normalBuffer);\n        this.gl.vertexAttribPointer(this.normalAttribute, 3, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex colors\n        this.gl.enableVertexAttribArray(this.colorAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.colorBuffer);\n        this.gl.vertexAttribPointer(this.colorAttribute, 4, this.gl.FLOAT, false, 0, 0);\n\n        if(this.texture)\n        {\n            // Activate the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 1);\n\n            // Set the texture\n            this.gl.activeTexture(this.gl.TEXTURE0 + this.texture.id)\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture.texture);\n            this.gl.uniform1i(this.textureUniform, this.texture.id);\n\n            // Set the texture coordinates\n            this.gl.enableVertexAttribArray(this.texCoordAttribute);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.texCoordBuffer);\n            this.gl.vertexAttribPointer(this.texCoordAttribute, 2, this.gl.FLOAT, false, 0, 0);\n        }\n        else\n        {\n            // Disable the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 0);\n        }\n\n        // Draw the triangles\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, mesh.indexBuffer);\n        this.gl.drawElements(this.gl.TRIANGLES, mesh.triangleCount*3, this.gl.UNSIGNED_SHORT, 0);\n    }\n}", "import { Vector3 } from \"./Vector3\"\n\nexport class BoundingBox3 \n{\n    public min: Vector3;\n    public max: Vector3;\n\n    constructor()\n    {\n        this.min = new Vector3();\n        this.max = new Vector3();\n    }\n\n    copy(box: BoundingBox3): void\n    {\n        this.min.copy(box.min);\n        this.max.copy(box.max);\n    }\n}", "import { Vector3 } from \"./Vector3\"\n\nexport class BoundingSphere \n{\n    public center: Vector3;\n    public radius: number;\n\n    constructor()\n    {\n        this.center = new Vector3();\n        this.radius = 0;\n    }\n\n    copy(circle: BoundingSphere): void\n    {\n        this.center.copy(circle.center);\n        this.radius = circle.radius;\n    }\n}", "import { Transform3 } from \"../../core/Transform3\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Vector3 } from \"../../math/Vector3\";\nimport { Color } from \"../../math/Color\";\nimport { Material3 } from \"../../materials/Material3\";\nimport { GouraudMaterial } from \"../../materials/GouraudMaterial\";\nimport { Camera } from \"../../core/Camera\";\nimport { LightManager } from \"../../lights/LightManager\";\nimport { GfxApp } from \"../../core/GfxApp\";\nimport { BoundingBox3 } from \"../../math/BoundingBox3\";\nimport { BoundingSphere } from \"../../math/BoundingSphere\"\n\nexport class Mesh extends Transform3\n{\n    protected readonly gl: WebGL2RenderingContext;\n\n    public positionBuffer: WebGLBuffer | null;\n    public normalBuffer: WebGLBuffer | null;\n    public colorBuffer: WebGLBuffer | null;\n    public indexBuffer: WebGLBuffer | null;\n    public texCoordBuffer: WebGLBuffer | null;\n\n    public vertexCount: number;\n    public triangleCount: number;\n\n    public material: Material3;\n\n    public boundingBox: BoundingBox3;\n    public boundingSphere: BoundingSphere;\n    \n    constructor()\n    {\n        super();\n\n        this.gl  = GfxApp.getInstance().renderer.gl;\n\n        this.positionBuffer = this.gl.createBuffer();\n        this.normalBuffer = this.gl.createBuffer();\n        this.colorBuffer = this.gl.createBuffer();\n        this.indexBuffer = this.gl.createBuffer();\n        this.texCoordBuffer = this.gl.createBuffer();\n        this.vertexCount = 0;\n        this.triangleCount = 0;\n\n        // default material\n        this.material = new GouraudMaterial();\n\n        this.boundingBox = new BoundingBox3();\n        this.boundingSphere = new BoundingSphere();\n    }\n\n    draw(parent: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible)\n            return;\n\n        this.material.draw(this, this, camera, lightManager);\n\n        this.children.forEach((elem: Transform3) => {\n            elem.draw(this, camera, lightManager);\n        });\n    }\n\n    setVertices(vertices: Vector3[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(vertices.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n\n            let vArray: number[];\n            if(typeof vertices[0] === 'number')\n            {\n                vArray = vertices as number[];\n                \n            }\n            else\n            {\n                vArray = [];\n                (vertices as Vector3[]).forEach((elem: Vector3) =>\n                {\n                    vArray.push(elem.x, elem.y, elem.z);\n                });\n            }\n            \n            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vArray), usage);\n            this.vertexCount = vArray.length / 3;\n\n            this.computeBounds(vertices); \n        }\n    }\n\n    setNormals(normals: Vector3[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(normals.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.normalBuffer);\n\n            if(typeof normals[0] === 'number')\n            {\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(normals as number[]), usage);\n            }\n            else\n            {\n                const nArray: number[] = [];\n                (normals as Vector3[]).forEach((elem: Vector3) =>\n                {\n                    nArray.push(elem.x, elem.y, elem.z);\n                });\n                \n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(nArray), usage);\n            }\n        }\n    }\n\n    setColors(colors: Color[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(colors.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.colorBuffer);\n\n            if(typeof colors[0] === 'number')\n            {\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(colors as number[]), usage);\n            }\n            else\n            {\n                const cArray: number[] = [];\n                (colors as Color[]).forEach((elem: Color) =>\n                {\n                    cArray.push(elem.r, elem.g, elem.b, elem.a);\n                });\n                \n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(cArray), usage);\n            }\n        }\n    }\n\n    setTextureCoordinates(texCoords: Vector2[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(texCoords.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer);\n\n            if(typeof texCoords[0] === 'number')\n            {\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(texCoords as number[]), usage);\n            }\n            else\n            {\n                const tArray: number[] = [];\n                (texCoords as Vector2[]).forEach((elem: Vector2) =>\n                {\n                    tArray.push(elem.x, elem.y);\n                });\n                \n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(tArray), usage);\n            }\n        }\n    }\n\n    setIndices(indices: Vector3[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(indices.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n\n            if(typeof indices[0] === 'number')\n            {\n                this.triangleCount = indices.length / 3;\n                this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices as number[]), usage);\n            }\n            else\n            {\n                this.triangleCount = indices.length;\n                const iArray: number[] = [];\n                (indices as Vector3[]).forEach((elem: Vector3) =>\n                {\n                    iArray.push(elem.x, elem.y, elem.z);\n                });\n                \n                this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(iArray), usage);\n            }\n        }\n    }\n\n    setArrayBuffer(values: Vector3[] | number[], buffer: WebGLBuffer | null, usage = this.gl.STATIC_DRAW): void\n    {\n        if(values.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\n\n            if(typeof values[0] === 'number')\n            {\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(values as number[]), usage);\n            }\n            else\n            {\n                const nArray: number[] = [];\n                (values as Vector3[]).forEach((elem: Vector3) =>\n                {\n                    nArray.push(elem.x, elem.y, elem.z);\n                });\n                \n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(nArray), usage);\n            }\n        }\n    }\n\n    getVertices(): number[]\n    {\n        const vertexArray = new Float32Array(this.vertexCount * 3);\n        this.gl.bindBuffer(this.gl.COPY_READ_BUFFER, this.positionBuffer);\n        this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER, 0, vertexArray);\n        return [... vertexArray];\n    }\n\n    getNormals(): number[]\n    {\n        const normalArray = new Float32Array(this.vertexCount * 3);\n        this.gl.bindBuffer(this.gl.COPY_READ_BUFFER, this.normalBuffer);\n        this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER, 0, normalArray);\n        return [... normalArray];\n    }\n\n    getColors(): number[]\n    {\n        const colorArray = new Float32Array(this.vertexCount * 4);\n        this.gl.bindBuffer(this.gl.COPY_READ_BUFFER, this.colorBuffer);\n        this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER, 0, colorArray);\n        return [... colorArray];\n    }\n\n    getTextureCoordinates(): number[]\n    {\n        const texCoordArray = new Float32Array(this.vertexCount * 2);\n        this.gl.bindBuffer(this.gl.COPY_READ_BUFFER, this.texCoordBuffer);\n        this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER, 0, texCoordArray);\n        return [... texCoordArray];\n    }\n\n    getIndices(): number[]\n    {\n        const indexArray = new Uint16Array(this.triangleCount * 3);\n        this.gl.bindBuffer(this.gl.COPY_READ_BUFFER, this.indexBuffer);\n        this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER, 0, indexArray);\n        return [... indexArray];\n    }\n\n    getArrayBuffer(buffer: WebGLBuffer | null): number[]\n    {\n        const valueArray = new Float32Array(this.vertexCount * 3);\n        this.gl.bindBuffer(this.gl.COPY_READ_BUFFER, buffer);\n        this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER, 0, valueArray);\n        return [... valueArray];\n    }\n\n    public createDefaultVertexColors(): void\n    {\n        const colors: number[] = [];\n\n        for(let i=0; i < this.vertexCount; i++)\n            colors.push(1, 1, 1, 1);\n\n        this.setColors(colors);\n    }\n\n    public computeBounds(vertices: Vector3[] | number[] | null): void\n    {\n        if(!vertices)\n        {\n            vertices = this.getVertices();\n        } \n        \n        if(vertices.length == 0)\n            return;\n\n        if(typeof vertices[0] === 'number')\n        {\n            const vArray = vertices as number[];\n\n            this.boundingBox.max.set(vArray[0], vArray[1], vArray[2]);\n            this.boundingBox.min.set(vArray[0], vArray[1], vArray[2]);\n            \n            for(let i=0; i < vArray.length; i+=3)\n            {\n                if(vArray[i] > this.boundingBox.max.x)\n                    this.boundingBox.max.x = vArray[i];\n                if(vArray[i] < this.boundingBox.min.x)\n                    this.boundingBox.min.x = vArray[i];\n\n                if(vArray[i+1] > this.boundingBox.max.y)\n                    this.boundingBox.max.y = vArray[i+1];\n                if(vArray[i+1] < this.boundingBox.min.y)\n                    this.boundingBox.min.y = vArray[i+1];\n\n                if(vArray[i+2] > this.boundingBox.max.z)\n                    this.boundingBox.max.z = vArray[i+2];\n                if(vArray[i+2] < this.boundingBox.min.z)\n                    this.boundingBox.min.z = vArray[i+2];    \n            }\n        }\n        else\n        {\n            this.boundingBox.max.copy((vertices as Vector3[])[0]);\n            this.boundingBox.min.copy((vertices as Vector3[])[0]);\n\n            (vertices as Vector3[]).forEach((elem: Vector3) =>\n            {\n                if(elem.x > this.boundingBox.max.x)\n                    this.boundingBox.max.x = elem.x;\n                if(elem.x < this.boundingBox.min.x)\n                    this.boundingBox.min.x = elem.x;\n\n                if(elem.y > this.boundingBox.max.y)\n                    this.boundingBox.max.y = elem.y;\n                if(elem.y < this.boundingBox.min.y)\n                    this.boundingBox.min.y =elem.y;\n\n                if(elem.z > this.boundingBox.max.z)\n                    this.boundingBox.max.z = elem.z;\n                if(elem.z < this.boundingBox.min.z)\n                    this.boundingBox.min.z = elem.z;\n            });\n        }\n\n        this.boundingSphere.center.copy(this.boundingBox.min);\n        this.boundingSphere.center.add(this.boundingBox.max);\n        this.boundingSphere.center.multiplyScalar(0.5);\n        this.boundingSphere.radius = 0;\n        if(typeof vertices[0] === 'number')\n        {\n            const vArray = vertices as number[];\n            for(let i=0; i < vArray.length; i+=3)\n            {\n                const distance = Math.sqrt(\n                    (vArray[i] - this.boundingSphere.center.x) * (vArray[i] - this.boundingSphere.center.x) +\n                    (vArray[i+1] - this.boundingSphere.center.y) * (vArray[i+1] - this.boundingSphere.center.y) +\n                    (vArray[i+2] - this.boundingSphere.center.z) * (vArray[i+2] - this.boundingSphere.center.z)\n                );\n                \n                if(distance > this.boundingSphere.radius)\n                    this.boundingSphere.radius = distance;\n            }\n        }\n        else\n        {\n            (vertices as Vector3[]).forEach((elem: Vector3) =>\n            {\n                const distance = elem.distanceTo(this.boundingSphere.center);\n\n                if(distance > this.boundingSphere.radius)\n                    this.boundingSphere.radius = distance;\n            });\n        }\n    }\n}", "import { Mesh } from './Mesh'\nimport { Transform3 } from '../../core/Transform3'\nimport { Camera } from \"../../core/Camera\";\nimport { LightManager } from \"../../lights/LightManager\";\nimport { Material3 } from '../../materials/Material3';\n\nexport class MeshInstance extends Transform3\n{\n    public readonly baseMesh;\n    public material: Material3;\n\n    constructor(baseMesh: Mesh, copyTransform = true)\n    {\n        super();\n        this.baseMesh = baseMesh;\n        this.material = baseMesh.material;\n\n        if(copyTransform)\n        {\n            this.position.copy(baseMesh.position);\n            this.rotation.copy(baseMesh.rotation);\n            this.scale.copy(baseMesh.scale);\n        }\n    }\n\n    getBaseMesh(): Mesh\n    {\n        return this.baseMesh;\n    }\n\n    draw(parent: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible)\n            return;\n\n        this.material.draw(this.baseMesh, this, camera, lightManager);\n\n        this.children.forEach((elem: Transform3) => {\n            elem.draw(this, camera, lightManager);\n        });\n    }\n}", "import { Mesh } from './Mesh'\nimport { Vector3 } from '../../math/Vector3';\n\nexport class BoxMesh extends Mesh\n{\n    public readonly width: number;\n    public readonly height: number;\n    public readonly depth: number;\n\n    constructor(width = 1, height = 1, depth = 1)\n    {\n        super();\n        \n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n\n        this.createVertices(this.width, this.height, this.depth);\n        this.createNormals();\n        this.createTextureCoords();\n        this.createIndices();\n        this.createDefaultVertexColors();\n    }\n\n    public setLine(startPoint: Vector3, endPoint: Vector3, thickness: number)\n    {\n        this.position.copy(startPoint);\n        this.lookAt(endPoint);\n\n        const distance = Vector3.distanceBetween(startPoint, endPoint);\n        this.translateZ(-distance/2);\n        this.scale.x = thickness;\n        this.scale.y = thickness;\n        this.scale.z = distance;\n    }\n\n\n    private createVertices(width: number, height: number, depth: number): void\n    {\n        const vertices: number[] = [];\n\n        // Front face\n        vertices.push(-width/2, -height/2, depth/2);\n        vertices.push(width/2, -height/2, depth/2);\n        vertices.push(width/2, height/2, depth/2);\n        vertices.push(-width/2, height/2, depth/2);\n\n        // Back face\n        vertices.push(-width/2, -height/2, -depth/2);\n        vertices.push(width/2, -height/2, -depth/2);\n        vertices.push(width/2, height/2, -depth/2);\n        vertices.push(-width/2, height/2, -depth/2);\n\n        // Left face\n        vertices.push(-width/2, -height/2, -depth/2);\n        vertices.push(-width/2, -height/2, depth/2);\n        vertices.push(-width/2, height/2, depth/2);\n        vertices.push(-width/2, height/2, -depth/2);\n\n        // Left face\n        vertices.push(width/2, -height/2, -depth/2);\n        vertices.push(width/2, -height/2, depth/2);\n        vertices.push(width/2, height/2, depth/2);\n        vertices.push(width/2, height/2, -depth/2);\n\n        // Top face\n        vertices.push(-width/2, height/2, depth/2);\n        vertices.push(width/2, height/2, depth/2);\n        vertices.push(width/2, height/2, -depth/2);\n        vertices.push(-width/2, height/2, -depth/2);\n\n        // Bottom face\n        vertices.push(-width/2, -height/2, depth/2);\n        vertices.push(width/2, -height/2, depth/2);\n        vertices.push(width/2, -height/2, -depth/2);\n        vertices.push(-width/2, -height/2, -depth/2);\n        \n        this.setVertices(vertices);\n    }\n\n    private createNormals(): void\n    {\n        const normals: number[] = [];\n\n        // Front face\n        normals.push(0, 0, 1);\n        normals.push(0, 0, 1);\n        normals.push(0, 0, 1);\n        normals.push(0, 0, 1);\n\n        // Back face\n        normals.push(0, 0, -1);\n        normals.push(0, 0, -1);\n        normals.push(0, 0, -1);\n        normals.push(0, 0, -1);\n\n        // Left face\n        normals.push(-1, 0, 0);\n        normals.push(-1, 0, 0);\n        normals.push(-1, 0, 0);\n        normals.push(-1, 0, 0);\n\n        // Right face\n        normals.push(1, 0, 0);\n        normals.push(1, 0, 0);\n        normals.push(1, 0, 0);\n        normals.push(1, 0, 0);\n\n        // Top face\n        normals.push(0, 1, 0);\n        normals.push(0, 1, 0);\n        normals.push(0, 1, 0);\n        normals.push(0, 1, 0);\n\n        // Bottom face\n        normals.push(0, -1, 0);\n        normals.push(0, -1, 0);\n        normals.push(0, -1, 0);\n        normals.push(0, -1, 0);\n       \n        this.setNormals(normals);\n    }\n\n    private createIndices(): void\n    {\n        const indices: number[] = [];\n\n        // Front face\n        indices.push(0, 1, 2);\n        indices.push(2, 3, 0);\n\n        // Back face\n        indices.push(4, 6, 5);\n        indices.push(6, 4, 7);\n\n        // Left face\n        indices.push(8, 9, 10);\n        indices.push(10, 11, 8);\n\n        // Right face\n        indices.push(12, 14, 13);\n        indices.push(14, 12, 15);\n\n        // Top face\n        indices.push(16, 17, 18);\n        indices.push(18, 19, 16);\n\n        // Bottom face\n        indices.push(20, 22, 21);\n        indices.push(22, 20, 23);\n\n        this.setIndices(indices);\n    }\n\n    private createTextureCoords(): void\n    {\n        const uvs: number[] = [];\n\n        // Front face\n        uvs.push(0, 1);\n        uvs.push(1, 1);\n        uvs.push(1, 0);\n        uvs.push(0, 0);\n\n        // Back face\n        uvs.push(1, 1);\n        uvs.push(0, 1);\n        uvs.push(0, 0);\n        uvs.push(1, 0);\n\n        // Left face\n        uvs.push(0, 1);\n        uvs.push(1, 1);\n        uvs.push(1, 0);\n        uvs.push(0, 0);\n\n        // Right face\n        uvs.push(1, 1);\n        uvs.push(0, 1);\n        uvs.push(0, 0);\n        uvs.push(1, 0);\n\n        // Top face\n        uvs.push(0, 1);\n        uvs.push(1, 1);\n        uvs.push(1, 0);\n        uvs.push(0, 0);\n\n        // Bottom face\n        uvs.push(1, 1);\n        uvs.push(0, 1);\n        uvs.push(0, 0);\n        uvs.push(1, 0);\n\n       this.setTextureCoordinates(uvs);\n    }\n}", "import { Mesh } from './Mesh';\nimport { Vector3 } from '../../math/Vector3';\n\nexport class SphereMesh extends Mesh\n{\n    public readonly radius;\n    public readonly subdivisions;\n\n    constructor(radius = 1, subdivisions=3)\n    {\n        super();\n        \n        this.radius = radius;\n        this.subdivisions = subdivisions;\n\n        this.createSphere(this.radius, this.subdivisions);\n    }\n\n    // Based on approach from \n    // https://www.danielsieger.com/blog/2021/01/03/generating-platonic-solids.html\n    // https://www.danielsieger.com/blog/2021/03/27/generating-spheres.html\n    private createSphere(radius: number, subdivisions: number): void\n    {\n        let vertices = [];\n        let indices = [];\n        const normals = [];\n        const texCoords = [];\n\n        const phi = (1 + Math.sqrt(5)) * 0.5; // golden ratio\n        const a = 1;\n        const b = 1 / phi;\n\n        vertices.push(new Vector3(0, b, -a));\n        vertices.push(new Vector3(b, a, 0));\n        vertices.push(new Vector3(-b, a, 0));\n        vertices.push(new Vector3(0, b, a));\n        vertices.push(new Vector3(0, -b, a));\n        vertices.push(new Vector3(-a, 0, b));\n        vertices.push(new Vector3(0, -b, -a));\n        vertices.push(new Vector3(a, 0, -b));\n        vertices.push(new Vector3(a, 0, b));\n        vertices.push(new Vector3(-a, 0, -b));\n        vertices.push(new Vector3(b, -a, 0));\n        vertices.push(new Vector3(-b, -a, 0));\n\n        // Project to unit sphere\n        for(let i=0; i < vertices.length; i++)\n        {\n            vertices[i].normalize();\n        }\n\n        indices.push(2, 1, 0);\n        indices.push(1, 2, 3);\n        indices.push(5, 4, 3);\n        indices.push(4, 8, 3);\n        indices.push(7, 6, 0);\n        indices.push(6, 9, 0);\n        indices.push(11, 10, 4);\n        indices.push(10, 11, 6);\n        indices.push(9, 5, 2);\n        indices.push(5, 9, 11);\n        indices.push(8, 7, 1);\n        indices.push(7, 8, 10);\n        indices.push(2, 5, 3);\n        indices.push(8, 1, 3);\n        indices.push(9, 2, 0);\n        indices.push(1, 7, 0);\n        indices.push(11, 9, 6);\n        indices.push(7, 10, 6);\n        indices.push(5, 11, 4);\n        indices.push(10, 8, 4);\n\n        for(let div=0; div < subdivisions; div++)\n        {\n            const newIndices = [];\n            for(let i=0; i < indices.length / 3; i++)\n            {\n                const index = i*3;\n                const centroids = this.createCentroids(vertices, indices[index], indices[index+1], indices[index+2]);\n                vertices.push(...centroids);\n\n                const triangles = this.subdivide(indices[index], indices[index+1], indices[index+2], \n                    vertices.length - 3, vertices.length - 2, vertices.length - 1);\n                    newIndices.push(... triangles);\n            }\n            indices = newIndices;\n        }\n\n        // Scale by the radius\n        for(let i=0; i < vertices.length; i++)\n        {\n            vertices[i].multiplyScalar(radius);\n        }\n\n        [vertices, indices] = this.mergeSharedVertices(vertices, indices);\n        \n        // Compute texture coordinates\n        for(let i=0; i < vertices.length; i++)\n        {\n            normals.push(Vector3.normalize(vertices[i]));\n\n            const v = 1 - (vertices[i].y + radius) / (2 * radius);\n\n            const direction = new Vector3(vertices[i].x, 0, vertices[i].z);\n            direction.normalize();\n\n            let angle = Math.acos(Vector3.FORWARD.dot(direction));\n            if(direction.x > 0)\n                 angle = Math.PI * 2 - angle;\n\n            const u = angle / (Math.PI * 2);\n            texCoords.push(u, v);\n        }\n        \n        const indicesLength = indices.length;\n\n        // Fix the texture seam by duplicating the vertices at the vertical edge of the sphere\n        for(let i=0; i < indicesLength; i+=3)\n        {\n            if(this.isSeamVertex(i, vertices, indices))\n            {\n                if(this.isEndVertex(i+1, vertices, indices) && this.isEndVertex(i+2, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i]]));\n                    normals.push(Vector3.normalize(vertices[indices[i]]));\n                    texCoords.push(1, texCoords[indices[i]*2+1]);\n\n                    indices[i] = vertices.length-1;\n                }\n                else if(this.isEndVertex(i+1, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i]]));\n                    normals.push(Vector3.normalize(vertices[indices[i]]));\n                    texCoords.push(1, texCoords[indices[i]*2+1]);\n\n                    vertices.push(Vector3.copy(vertices[indices[i+2]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+2]]));\n                    texCoords.push(1, texCoords[indices[i+2]*2+1]);\n\n                    indices[i] = vertices.length-2;\n                    indices[i+2] = vertices.length-1;\n                }\n                else if(this.isEndVertex(i+2, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i]]));\n                    normals.push(Vector3.normalize(vertices[indices[i]]));\n                    texCoords.push(1, texCoords[indices[i]*2+1]);\n\n                    vertices.push(Vector3.copy(vertices[indices[i+1]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+1]]));\n                    texCoords.push(1, texCoords[indices[i+1]*2+1]);\n\n                    indices[i] = vertices.length-2;\n                    indices[i+1] = vertices.length-1;\n                }\n            }\n            else if(this.isSeamVertex(i+1, vertices, indices))\n            { \n                if(this.isEndVertex(i, vertices, indices) && this.isEndVertex(i+2, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i+1]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+1]]));\n                    texCoords.push(1, texCoords[indices[i+1]*2+1]);\n\n                    indices[i+1] = vertices.length-1;\n                }\n                else if(this.isEndVertex(i, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i+1]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+1]]));\n                    texCoords.push(1, texCoords[indices[i+1]*2+1]);\n\n                    vertices.push(Vector3.copy(vertices[indices[i+2]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+2]]));\n                    texCoords.push(1, texCoords[indices[i+2]*2+1]);\n\n                    indices[i+1] = vertices.length-2;\n                    indices[i+2] = vertices.length-1;\n                }\n                else if(this.isEndVertex(i+2, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i]]));\n                    normals.push(Vector3.normalize(vertices[indices[i]]));\n                    texCoords.push(1, texCoords[indices[i]*2+1]);\n\n                    vertices.push(Vector3.copy(vertices[indices[i+1]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+1]]));\n                    texCoords.push(1, texCoords[indices[i+1]*2+1]);\n\n                    indices[i] = vertices.length-2;\n                    indices[i+1] = vertices.length-1;\n                }\n            }\n            else if(this.isSeamVertex(i+2, vertices, indices))\n            {\n                if(this.isEndVertex(i, vertices, indices) && this.isEndVertex(i+1, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i+2]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+2]]));\n                    texCoords.push(1, texCoords[indices[i+2]*2+1]);\n\n                    indices[i+2] = vertices.length-1;\n                }\n                else if(this.isEndVertex(i, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i+1]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+1]]));\n                    texCoords.push(1, texCoords[indices[i+1]*2+1]);\n\n                    vertices.push(Vector3.copy(vertices[indices[i+2]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+2]]));\n                    texCoords.push(1, texCoords[indices[i+2]*2+1]);\n\n                    indices[i+1] = vertices.length-2;\n                    indices[i+2] = vertices.length-1;\n                }\n                else if(this.isEndVertex(i+1, vertices, indices))\n                {\n                    vertices.push(Vector3.copy(vertices[indices[i]]));\n                    normals.push(Vector3.normalize(vertices[indices[i]]));\n                    texCoords.push(1, texCoords[indices[i]*2+1]);\n\n                    vertices.push(Vector3.copy(vertices[indices[i+2]]));\n                    normals.push(Vector3.normalize(vertices[indices[i+2]]));\n                    texCoords.push(1, texCoords[indices[i+2]*2+1]);\n\n                    indices[i] = vertices.length-2;\n                    indices[i+2] = vertices.length-1;\n                }\n            }\n        }\n\n        this.setVertices(vertices);\n        this.setNormals(normals);\n        this.setTextureCoordinates(texCoords);\n        this.setIndices(indices);\n        this.createDefaultVertexColors();\n    }\n\n    private isEndVertex(i: number, vertices: Vector3[], indices: number[]): boolean\n    {\n        if(vertices[indices[i]].x > 0)\n            return true;\n        else\n            return false;\n    }\n\n    private isSeamVertex(i: number, vertices: Vector3[], indices: number[]): boolean\n    {\n        if(vertices[indices[i]].x == 0 && vertices[indices[i]].z <= 0)\n            return true;\n        else\n            return false;\n    }\n\n    private createCentroids(vertices: Vector3[], v1: number, v2: number, v3: number): Vector3[]\n    {\n        const centroids = [];\n\n        const centroid1 = Vector3.add(vertices[v1], vertices[v2]);\n        centroid1.divideScalar(2);\n        centroid1.normalize();\n        centroids.push(centroid1);\n\n        const centroid2 = Vector3.add(vertices[v2], vertices[v3]);\n        centroid2.divideScalar(2);\n        centroid2.normalize();\n        centroids.push(centroid2);\n\n        const centroid3 = Vector3.add(vertices[v3], vertices[v1]);\n        centroid3.divideScalar(2);\n        centroid3.normalize();\n        centroids.push(centroid3);\n\n        return centroids;\n    }\n\n    private subdivide(v1: number, v2: number, v3: number, c1: number, c2: number, c3: number): number[]\n    {\n        const triangles = [];\n        triangles.push(v1, c1, c3);\n        triangles.push(v2, c2, c1);\n        triangles.push(v3, c3, c2);\n        triangles.push(c1, c2, c3);\n        return triangles;\n    }\n\n    private mergeSharedVertices(vertices: Vector3[], indices: number[]): [Vector3[], number[]]\n    {\n        const newVertices: Vector3[] = [];\n        const newIndices: number[] = [];\n\n        indices.forEach((elem: number) => {\n            newIndices.push(elem);\n        });\n\n        for(let i=0; i < vertices.length; i++)\n        {\n            let duplicate = false;\n            for(let j = 0; j < newVertices.length; j++)\n            {\n                if(vertices[i].equals(newVertices[j]))\n                {\n                    for(let k = 0; k < indices.length; k++)\n                    {\n                        if(indices[k] == i)\n                            newIndices[k] = j;\n                    }\n\n                    duplicate = true;\n                }   \n            }\n\n            if(!duplicate)\n            {\n                newVertices.push(vertices[i]);\n\n                for(let k = 0; k < indices.length; k++)\n                {\n                    if(indices[k] == i)\n                        newIndices[k] = newVertices.length-1;\n                }\n            }\n        }\n\n        return [newVertices, newIndices];\n    }\n}", "import { Mesh } from './Mesh'\n\nexport class PlaneMesh extends Mesh\n{\n    public readonly width;\n    public readonly height;\n\n    constructor(width = 1, height = 1)\n    {\n        super();\n        \n        this.width = width;\n        this.height = height;\n\n        this.createVertices(this.width, this.height);\n        this.createNormals();\n        this.createTextureCoords();\n        this.createIndices();\n        this.createDefaultVertexColors();\n    }\n\n    private createVertices(width: number, height: number): void\n    {\n        const vertices = [];\n\n        vertices.push(-width/2, -height/2, 0);\n        vertices.push(width/2, -height/2, 0);\n        vertices.push(width/2, height/2, 0);\n        vertices.push(-width/2, height/2,0);\n        \n        this.setVertices(vertices);\n    }\n\n    private createNormals(): void\n    {\n        const normals = [];\n\n        // Back face\n        normals.push(0, 0, -1);\n        normals.push(0, 0, -1);\n        normals.push(0, 0, -1);\n        normals.push(0, 0, -1);\n       \n        this.setNormals(normals);\n    }\n\n    private createIndices(): void\n    {\n        const indices = [];\n\n        indices.push(0, 2, 1);\n        indices.push(2, 0, 3);\n\n        this.setIndices(indices);\n    }\n\n    private createTextureCoords(): void\n    {\n        const uvs = [];\n\n        uvs.push(1, 1);\n        uvs.push(0, 1);\n        uvs.push(0, 0);\n        uvs.push(1, 0);\n\n       this.setTextureCoordinates(uvs);\n    }\n}", "// @ts-ignore\nimport shapeVertexShader from '../shaders/shape.vert'\n// @ts-ignore\nimport shapeFragmentShader from '../shaders/shape.frag'\n\nimport { GfxApp } from '../core/GfxApp';\nimport { ShaderProgram } from './ShaderProgram';\nimport { Shape } from '../geometry/2d/Shape';\nimport { Transform2 } from '../core/Transform2'\nimport { Color } from '../math/Color' \nimport { Texture } from './Texture';\n\nexport class Material2\n{\n    public visible: boolean;\n    public color: Color;\n    public drawMode: number;\n    public texture: Texture | null;\n\n    private readonly gl: WebGL2RenderingContext;\n    private static shader = new ShaderProgram(shapeVertexShader, shapeFragmentShader);\n\n    private colorUniform: WebGLUniformLocation | null;\n    private modelUniform: WebGLUniformLocation | null;\n    private layerUniform: WebGLUniformLocation | null;\n\n    private textureUniform: WebGLUniformLocation | null;\n    private useTextureUniform: WebGLUniformLocation | null;\n\n    private positionAttribute: number;\n    private colorAttribute: number;\n    private texCoordAttribute: number;\n\n    constructor()\n    {\n        this.gl  = GfxApp.getInstance().renderer.gl;\n\n        this.visible = true;\n        this.color = new Color(1, 1, 1);\n        this.drawMode = this.gl.LINE_LOOP;\n        this.texture = null;\n        \n        Material2.shader.initialize(this.gl);\n\n        this.colorUniform = Material2.shader.getUniform(this.gl, 'color');\n        this.modelUniform = Material2.shader.getUniform(this.gl, 'modelMatrix');\n        this.layerUniform = Material2.shader.getUniform(this.gl, 'layer');\n\n        this.textureUniform = Material2.shader.getUniform(this.gl, 'textureImage');\n        this.useTextureUniform = Material2.shader.getUniform(this.gl, 'useTexture');\n\n        this.positionAttribute = Material2.shader.getAttribute(this.gl, 'position');\n        this.colorAttribute = Material2.shader.getAttribute(this.gl, 'color');\n        this.texCoordAttribute = Material2.shader.getAttribute(this.gl, 'texCoord');\n    }\n\n    copy(mat: Material2): void\n    {\n        this.visible = mat.visible;\n        this.color.copy(mat.color);\n        this.drawMode = mat.drawMode;\n        this.texture = mat.texture;\n    }\n\n    draw(shape: Shape, transform: Transform2): void\n    {\n        if(!this.visible || shape.vertexCount == 0)\n            return;\n\n        // Switch to this shader\n        this.gl.useProgram(Material2.shader.getProgram());\n\n        // Set the model matrix uniform\n        this.gl.uniformMatrix3fv(this.modelUniform, false, transform.worldMatrix.mat);\n\n        // Set the material property uniforms\n        this.gl.uniform4f(this.colorUniform, this.color.r, this.color.g, this.color.b, this.color.a);\n\n        // Set the layer uniform\n        this.gl.uniform1f(this.layerUniform, transform.layer);\n\n        // Set the vertex colors\n        this.gl.enableVertexAttribArray(this.colorAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, shape.colorBuffer);\n        this.gl.vertexAttribPointer(this.colorAttribute, 4, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex positions\n        this.gl.enableVertexAttribArray(this.positionAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, shape.positionBuffer);\n        this.gl.vertexAttribPointer(this.positionAttribute, 2, this.gl.FLOAT, false, 0, 0);\n\n        if(this.texture)\n        {\n            // Activate the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 1);\n\n            // Set the texture\n            this.gl.activeTexture(this.gl.TEXTURE0 + this.texture.id)\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture.texture);\n            this.gl.uniform1i(this.textureUniform, this.texture.id);\n\n            // Set the texture coordinates\n            this.gl.enableVertexAttribArray(this.texCoordAttribute);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, shape.texCoordBuffer);\n            this.gl.vertexAttribPointer(this.texCoordAttribute, 2, this.gl.FLOAT, false, 0, 0);\n        }\n        else\n        {\n            // Disable the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 0);\n        }\n\n        // Draw the shape\n        this.gl.drawArrays(this.drawMode, 0, shape.vertexCount);\n    }\n}", "import { Transform2 } from \"../../core/Transform2\";\nimport { Vector2 } from \"../../math/Vector2\";\nimport { Color } from \"../../math/Color\";\nimport { Material2 } from \"../../materials/Material2\";\nimport { GfxApp } from \"../../core/GfxApp\";\n\nexport class Shape extends Transform2\n{\n    protected readonly gl: WebGL2RenderingContext;\n\n    public positionBuffer: WebGLBuffer | null;\n    public colorBuffer: WebGLBuffer | null;\n    public texCoordBuffer: WebGLBuffer | null;\n\n    public vertexCount: number;\n\n    public material: Material2;\n    \n    constructor()\n    {\n        super();\n\n        this.gl  = GfxApp.getInstance().renderer.gl;\n\n        this.positionBuffer = this.gl.createBuffer();\n        this.colorBuffer = this.gl.createBuffer();\n        this.texCoordBuffer = this.gl.createBuffer();\n        this.vertexCount = 0;\n\n        // default material\n        this.material = new Material2();\n    }\n\n    draw(parent: Transform2): void\n    {\n        if(!this.visible)\n            return;\n\n        this.material.draw(this, this);\n\n        this.children.forEach((elem: Transform2) => {\n            elem.draw(this);\n        });\n    }\n\n    setVertices(vertices: Vector2[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(vertices.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n\n            let vArray: number[];\n            if(typeof vertices[0] === 'number')\n            {\n                vArray = vertices as number[];\n                \n            }\n            else\n            {\n                vArray = [];\n                (vertices as Vector2[]).forEach((elem: Vector2) =>\n                {\n                    vArray.push(elem.x, elem.y);\n                });\n            }\n            \n            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vArray), usage);\n            this.vertexCount = vArray.length / 2;\n\n            this.computeBounds(vertices);\n        }\n    }\n\n    setColors(colors: Color[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(colors.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.colorBuffer);\n\n            if(typeof colors[0] === 'number')\n            {\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(colors as number[]), usage);\n            }\n            else\n            {\n                const cArray: number[] = [];\n                (colors as Color[]).forEach((elem: Color) =>\n                {\n                    cArray.push(elem.r, elem.g, elem.b, elem.a);\n                });\n                \n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(cArray), usage);\n            }\n        }\n    }\n\n    setTextureCoordinates(texCoords: Vector2[] | number[], usage = this.gl.STATIC_DRAW): void\n    {\n        if(texCoords.length > 0)\n        {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer);\n\n            if(typeof texCoords[0] === 'number')\n            {\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(texCoords as number[]), usage);\n            }\n            else\n            {\n                const tArray: number[] = [];\n                (texCoords as Vector2[]).forEach((elem: Vector2) =>\n                {\n                    tArray.push(elem.x, elem.y);\n                });\n                \n                this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(tArray), usage);\n            }\n        }\n    }\n\n    getVertices(): number[]\n    {\n        const vertexArray = new Float32Array(this.vertexCount * 2);\n        this.gl.bindBuffer(this.gl.COPY_READ_BUFFER, this.positionBuffer);\n        this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER, 0, vertexArray);\n        return [... vertexArray];\n    }\n\n    getColors(): number[]\n    {\n        const colorArray = new Float32Array(this.vertexCount * 4);\n        this.gl.bindBuffer(this.gl.COPY_READ_BUFFER, this.colorBuffer);\n        this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER, 0, colorArray);\n        return [... colorArray];\n    }\n\n    getTextureCoordinates(): number[]\n    {\n        const texCoordArray = new Float32Array(this.vertexCount * 2);\n        this.gl.bindBuffer(this.gl.COPY_READ_BUFFER, this.texCoordBuffer);\n        this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER, 0, texCoordArray);\n        return [... texCoordArray];\n    }\n\n    public createDefaultVertexColors(): void\n    {\n        const colors: number[] = [];\n\n        for(let i=0; i < this.vertexCount; i++)\n            colors.push(1, 1, 1, 1);\n\n        this.setColors(colors);\n    }\n\n    public computeBounds(vertices: Vector2[] | number[] | null): void\n    {\n        if(!vertices)\n        {\n            vertices = this.getVertices();\n        } \n        \n        if(vertices.length == 0)\n            return;\n\n        if(typeof vertices[0] === 'number')\n        {\n            const vArray = vertices as number[];\n\n            this.boundingBox.max.set(vArray[0], vArray[1]);\n            this.boundingBox.min.set(vArray[0], vArray[1]);\n            \n            for(let i=0; i < vArray.length; i+=3)\n            {\n                if(vArray[i] > this.boundingBox.max.x)\n                    this.boundingBox.max.x = vArray[i];\n                if(vArray[i] < this.boundingBox.min.x)\n                    this.boundingBox.min.x = vArray[i];\n\n                if(vArray[i+1] > this.boundingBox.max.y)\n                    this.boundingBox.max.y = vArray[i+1];\n                if(vArray[i+1] < this.boundingBox.min.y)\n                    this.boundingBox.min.y = vArray[i+1];\n            }\n        }\n        else\n        {\n            this.boundingBox.max.copy((vertices as Vector2[])[0]);\n            this.boundingBox.min.copy((vertices as Vector2[])[0]);\n\n            (vertices as Vector2[]).forEach((elem: Vector2) =>\n            {\n                if(elem.x > this.boundingBox.max.x)\n                    this.boundingBox.max.x = elem.x;\n                if(elem.x < this.boundingBox.min.x)\n                    this.boundingBox.min.x = elem.x;\n\n                if(elem.y > this.boundingBox.max.y)\n                    this.boundingBox.max.y = elem.y;\n                if(elem.y < this.boundingBox.min.y)\n                    this.boundingBox.min.y =elem.y;\n            });\n        }\n\n        this.boundingCircle.center.copy(this.boundingBox.min);\n        this.boundingCircle.center.add(this.boundingBox.max);\n        this.boundingCircle.center.multiplyScalar(0.5);\n        this.boundingCircle.radius = 0;\n        if(typeof vertices[0] === 'number')\n        {\n            const vArray = vertices as number[];\n            for(let i=0; i < vArray.length; i+=3)\n            {\n                const distance = Math.sqrt(\n                    (vArray[i] - this.boundingCircle.center.x) * (vArray[i] - this.boundingCircle.center.x) +\n                    (vArray[i+1] - this.boundingCircle.center.y) * (vArray[i+1] - this.boundingCircle.center.y)\n                );\n                \n                if(distance > this.boundingCircle.radius)\n                    this.boundingCircle.radius = distance;\n            }\n        }\n        else\n        {\n            (vertices as Vector2[]).forEach((elem: Vector2) =>\n            {\n                const distance = elem.distanceTo(this.boundingCircle.center);\n\n                if(distance > this.boundingCircle.radius)\n                    this.boundingCircle.radius = distance;\n            });\n        }\n    }\n}", "import { Shape } from './Shape'\nimport { Transform2 } from '../../core/Transform2'\nimport { Material2 } from '../../materials/Material2';\n\nexport class ShapeInstance extends Transform2\n{\n    public readonly baseShape;\n    public material: Material2;\n\n    constructor(baseShape: Shape, copyTransform = true)\n    {\n        super();\n        this.baseShape = baseShape;\n        this.boundingBox = baseShape.boundingBox;\n        this.boundingCircle = baseShape.boundingCircle;\n        this.material = baseShape.material;\n        \n        if(copyTransform)\n        {\n            this.position.copy(baseShape.position);\n            this.rotation = baseShape.rotation;\n            this.scale.copy(baseShape.scale);\n            this.layer = baseShape.layer;\n        }\n    }\n\n    getBaseShape(): Shape\n    {\n        return this.baseShape;\n    }\n\n    draw(parent: Transform2): void\n    {\n        if(!this.visible)\n            return;\n\n        this.material.draw(this.baseShape, this);\n\n        this.children.forEach((elem: Transform2) => {\n            elem.draw(this);\n        });\n    }\n}", "import { Shape } from './Shape'\n\nexport class Rectangle extends Shape\n{\n    public readonly width: number;\n    public readonly height: number;\n\n    constructor(width = 1, height = 1)\n    {\n        super();\n\n        this.width = width;\n        this.height  = height;\n\n        this.material.drawMode = this.gl.TRIANGLE_STRIP;\n\n        this.createVertices(this.width, this.height);\n        this.createTextureCoordinates();\n        this.createDefaultVertexColors();\n    }\n\n\n    private createVertices(width: number, height: number): void\n    {\n        const vertices: number[] = [];\n\n        vertices.push(-width/2, height/2);\n        vertices.push(-width/2, -height/2);\n        vertices.push(width/2, height/2);\n        vertices.push(width/2, -height/2);\n        \n        this.setVertices(vertices);\n    }\n\n    private createTextureCoordinates(): void\n    {\n        const uvs: number[] = [];\n\n        uvs.push(0, 0);\n        uvs.push(0, 1);\n        uvs.push(1, 0);\n        uvs.push(1, 1);\n        \n        this.setTextureCoordinates(uvs);\n    }\n}", "import { Shape } from './Shape'\n\nexport class Circle extends Shape\n{\n    public readonly radius: number;\n\n    constructor(radius = 0.5, numSegments = 50)\n    {\n        super();\n\n        this.radius = radius;\n\n        this.material.drawMode = this.gl.TRIANGLE_FAN;\n\n        this.createVertices(this.radius, numSegments);\n        this.createTextureCoordinates(numSegments);\n        this.createDefaultVertexColors();\n    }\n\n\n    private createVertices(radius: number, numSegments: number): void\n    {\n        const vertices = [0, 0];\n   \n        const angle = (Math.PI * 2) / numSegments;\n\n        for(let i=0; i <= numSegments; i++)\n        {\n            vertices.push(Math.cos(angle*i) * radius, Math.sin(angle*i) * radius);\n        }\n        \n        this.setVertices(vertices);\n    }\n\n    private createTextureCoordinates(numSegments: number): void\n    {\n        const uvs = [0.5, 0.5];\n\n        const angle = (Math.PI * 2) / numSegments;\n\n        for(let i=0; i <= numSegments; i++)\n        {\n            uvs.push((Math.cos(angle*i) + 1) / 2, (Math.sin(angle*i) - 1) / -2);\n        }\n        \n        this.setTextureCoordinates(uvs);\n    }\n}", "import { Vector2 } from '../../math/Vector2';\nimport { Shape } from './Shape'\n\nexport class Line extends Shape\n{\n\n    constructor(startPoint: Vector2, endPoint: Vector2, thickness = .01)\n    {\n        super();\n\n        this.material.drawMode = this.gl.TRIANGLE_STRIP;\n\n       this.createVertices(startPoint.distanceTo(endPoint), thickness);\n\n       this.position = Vector2.add(startPoint, endPoint);\n       this.position.divideScalar(2);\n\n       const direction = Vector2.subtract(endPoint, startPoint);\n       direction.normalize();\n       this.rotation = Vector2.angleBetween(Vector2.RIGHT, direction);\n\n       this.createDefaultVertexColors();\n    }\n\n    private createVertices(width: number, height: number): void\n    {\n        const vertices: number[] = [];\n\n        vertices.push(-width/2, height/2);\n        vertices.push(-width/2, -height/2);\n        vertices.push(width/2, height/2);\n        vertices.push(width/2, -height/2);\n        \n        this.setVertices(vertices);\n    }\n}", "import { Camera } from '../core/Camera';\nimport { Quaternion } from '../math/Quaternion';\nimport { Vector3 } from '../math/Vector3';\n\nexport class OrbitControls\n{\n    public camera: Camera;\n    public zoomable: boolean;\n    public rotationSpeed: number;\n    public zoomSpeed: number;\n\n    // Camera parameters\n    private targetPoint: Vector3;\n    private distance: number;\n    private cameraOrbitX: Quaternion;\n    private cameraOrbitY: Quaternion;\n    private rotationDirection: Vector3;\n    private zoomDirection: number;\n    private mouseDrag: boolean;\n\n    constructor(camera: Camera, distance = 1, zoomable = true)\n    {\n        this.camera = camera;\n        this.zoomable = zoomable;\n        this.distance = distance;\n\n        this.rotationSpeed = Math.PI / 4;\n        this.zoomSpeed = .25;\n\n        this.targetPoint = new Vector3();\n        this.cameraOrbitX = new Quaternion();\n        this.cameraOrbitY = new Quaternion();\n        this.rotationDirection = new Vector3();\n        this.zoomDirection = 0;\n        this.mouseDrag = false;\n\n        window.addEventListener('mousedown', (event: MouseEvent) => {this.onMouseDown(event)});\n        window.addEventListener('mouseup', (event: MouseEvent) => {this.onMouseUp(event)});\n        window.addEventListener('mousemove', (event: MouseEvent) => {this.onMouseMove(event)});\n        window.addEventListener('wheel', (event: WheelEvent) => {this.onMouseWheel(event)});\n\n        this.updateCamera();\n    }\n\n    setTargetPoint(targetPoint: Vector3): void\n    {\n        this.targetPoint.copy(targetPoint);\n        this.updateCamera();\n    }\n\n    setDistance(distance: number): void\n    {\n        this.distance = distance;\n        this.updateCamera();\n    }\n\n    setOrbit(orbitX: number, orbitY: number): void\n    {\n        this.cameraOrbitX.setRotationX(orbitX);\n        this.cameraOrbitY.setRotationY(orbitY);\n        this.updateCamera();\n    }\n\n    onMouseDown(event: MouseEvent): void \n    {\n        if((event.target! as Element).localName == \"canvas\")\n            this.mouseDrag = true;\n    }\n\n    onMouseUp(event: MouseEvent): void\n    {\n        this.mouseDrag = false;\n    }\n    \n    onMouseMove(event: MouseEvent): void\n    {\n        if(this.mouseDrag)\n        {\n            this.rotationDirection.x += -event.movementY;\n            this.rotationDirection.y += -event.movementX;\n        }\n    }\n\n    onMouseWheel(event: WheelEvent): void \n    {\n        if(this.zoomable)\n        {\n            this.zoomDirection += event.deltaY;\n        }\n    }\n\n    update(deltaTime: number): void\n    {\n        this.cameraOrbitX.multiply(Quaternion.makeRotationX(this.rotationDirection.x * this.rotationSpeed * deltaTime));\n        this.cameraOrbitY.multiply(Quaternion.makeRotationY(this.rotationDirection.y * this.rotationSpeed * deltaTime));\n        this.distance += this.zoomDirection * this.zoomSpeed * deltaTime;\n\n        // Reset the cumulative parameters\n        this.rotationDirection.set(0, 0, 0);\n        this.zoomDirection = 0;\n\n        this.updateCamera();\n    }\n\n    private updateCamera(): void \n    {\n        this.camera.rotation.copy(this.cameraOrbitX);\n        this.camera.rotation.multiply(this.cameraOrbitY);\n\n        this.camera.position.set(0, 0, this.distance);\n        this.camera.position.rotate(this.camera.rotation);\n        this.camera.position.add(this.targetPoint);\n    }\n}", "import { Camera } from '../core/Camera';\nimport { Vector3 } from '../math/Vector3';\nimport { Quaternion } from '../math/Quaternion';\n\nexport class FirstPersonControls\n{\n    public camera: Camera;\n    \n    public translationSpeed: number;\n    public rotationSpeed: number;\n\n    // Camera parameters\n    private moveDirection: Vector3;\n    private rotationDirection: Vector3;\n    private mouseDrag: boolean;\n\n    private targetOrbitX: Quaternion;\n    private targetOrbitY: Quaternion;\n\n    constructor(camera: Camera)\n    {\n        this.camera = camera;\n\n        this.translationSpeed = 2;\n        this.rotationSpeed = Math.PI / 4;\n\n        this.moveDirection = new Vector3();\n        this.rotationDirection = new Vector3();\n        this.mouseDrag = false;\n\n        this.targetOrbitX = new Quaternion();\n        this.targetOrbitY = new Quaternion();\n\n        window.addEventListener('mousedown', (event: MouseEvent) => {this.onMouseDown(event)});\n        window.addEventListener('mouseup', (event: MouseEvent) => {this.onMouseUp(event)});\n        window.addEventListener('mousemove', (event: MouseEvent) => {this.onMouseMove(event)});\n        window.addEventListener('keydown', (event: KeyboardEvent) => {this.onKeyDown(event)});\n        window.addEventListener('keyup', (event: KeyboardEvent) => {this.onKeyUp(event)});  \n    }\n\n\n    onMouseDown(event: MouseEvent): void \n    {\n        if((event.target! as Element).localName == \"canvas\")\n            this.mouseDrag = true;\n    }\n\n    onMouseUp(event: MouseEvent): void\n    {\n        this.mouseDrag = false;\n        this.rotationDirection.set(0, 0, 0);\n    }\n    \n    onMouseMove(event: MouseEvent): void\n    {\n        if(this.mouseDrag)\n        {\n            this.rotationDirection.x += -event.movementY;\n            this.rotationDirection.y += -event.movementX;\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void \n    {\n        if(event.key == 'w')\n        {\n            this.moveDirection.z = -1;\n        }\n        else if(event.key == 's')\n        {\n            this.moveDirection.z = 1;\n        }\n        else if(event.key == 'a')\n        {\n            this.moveDirection.x = -1;\n        }\n        else if(event.key == 'd')\n        {\n            this.moveDirection.x = 1;\n        }\n    }\n\n    onKeyUp(event: KeyboardEvent): void \n    {\n        if(event.key == 'w' && this.moveDirection.z == -1)\n        {\n            this.moveDirection.z = 0;\n        }\n        if(event.key == 's' && this.moveDirection.z == 1)\n        {\n            this.moveDirection.z = 0;\n        }\n        else if(event.key == 'a' && this.moveDirection.x == -1)\n        {\n            this.moveDirection.x = 0;\n        }\n        else if(event.key == 'd' && this.moveDirection.x == 1)\n        {\n            this.moveDirection.x = 0;\n        }\n    }\n\n    update(deltaTime: number): void\n    {\n        // Prevent the camera from rotating upside-down\n        const newTargetOrbitX = Quaternion.multiply(this.targetOrbitX, Quaternion.makeRotationX(this.rotationDirection.x * this.rotationSpeed * deltaTime));\n        const testVector = new Vector3(0, 0, -1);\n        testVector.rotate(newTargetOrbitX);\n        if(testVector.z < 0)\n            this.targetOrbitX.copy(newTargetOrbitX);\n\n        // Set the yaw target\n        this.targetOrbitY.multiply(Quaternion.makeRotationY(this.rotationDirection.y * this.rotationSpeed * deltaTime));\n\n        // Reset the cumulative rotation direction\n        this.rotationDirection.set(0, 0, 0);\n        \n        // Compute the look target and aim the camera accordignly\n        const target = new Vector3(0, 0, -1);\n        target.rotate(this.targetOrbitX);\n        target.rotate(this.targetOrbitY);\n        target.add(this.camera.position);\n        this.camera.lookAt(target, Vector3.UP);\n        \n        // Translate the camera based on the keyboard input\n        const moveDirectionNormalized = Vector3.normalize(this.moveDirection);\n        moveDirectionNormalized.multiplyScalar(this.translationSpeed * deltaTime);\n        this.camera.translate(moveDirectionNormalized);\n    }\n}", "import { Color } from \"../math/Color\";\nimport { LightManager } from \"./LightManager\";\nimport { Transform3 } from \"../core/Transform3\";\n\nexport enum LightType\n{\n    POINT = 0,\n    DIRECTIONAL\n}\n\nexport abstract class Light extends Transform3\n{\n    public ambientIntensity: Color;\n    public diffuseIntensity: Color;\n    public specularIntensity: Color;\n\n    protected readonly type: LightType;\n\n    constructor(type = LightType.POINT, ambientIntensity = new Color(), diffuseIntensity = new Color(), specularIntensity = new Color())\n    {\n        super();\n\n        this.type = type;\n        this.ambientIntensity = ambientIntensity;\n        this.diffuseIntensity = diffuseIntensity;\n        this.specularIntensity = specularIntensity;\n    }\n\n    getType(): LightType\n    {\n        return this.type;\n    }\n\n    setLights(lightManager: LightManager): void\n    {\n        lightManager.addLight(this);\n        super.setLights(lightManager);\n    }\n}", "import { Color } from \"../math/Color\";\nimport { Light, LightType } from \"./Light\";\n\nexport class AmbientLight extends Light\n{\n    constructor(color = new Color(0.5, 0.5, 0.5))\n    {\n        super(LightType.POINT, color, new Color(0, 0, 0),  new Color(0, 0, 0));\n    }\n}", "import { Color } from \"../math/Color\";\nimport { Light, LightType } from \"./Light\";\n\nexport class DirectionalLight extends Light\n{\n    constructor(color = new Color(0.5, 0.5, 0.5))\n    {\n        super(LightType.DIRECTIONAL, new Color(0, 0, 0), color, color);\n    }\n}", "import { Color } from \"../math/Color\";\nimport { Light, LightType } from \"./Light\";\n\nexport class PointLight extends Light\n{\n    constructor(color = new Color(0.5, 0.5, 0.5))\n    {\n        super(LightType.POINT, new Color(0, 0, 0), color, color);\n    }\n}", "export class StringParser\n{\n    private readonly tokens: string[][];\n    private line: number;\n    private token: number;\n\n    constructor(data: string)\n    {\n        this.tokens = [];\n        this.line = 0;\n        this.token = 0;\n\n        // Trim whitespace from each line\n        const lines = data.split('\\n');\n        for(let i=0; i < lines.length; i++)\n        {\n            this.tokens.push(lines[i].trim().split(/\\s+/));\n        }\n\n        // Remove empty strings\n        for(let i=0; i < this.tokens.length; i++)\n        {\n            if(this.tokens[i].length == 1 && this.tokens[i][0] == '')\n            {\n                this.tokens.splice(i, 1);\n                i--;\n            }\n        }\n    }\n\n    peek(): string\n    {\n        return this.tokens[this.line][this.token];\n    }\n    \n    expect(token: string): boolean\n    {\n        if(this.peek() == token)\n        {\n            this.readToken();\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    consumeLine(): void\n    {\n        this.line++;\n        this.token = 0;\n    }\n\n    done(): boolean\n    {\n        return this.line >= this.tokens.length;\n    }\n\n    readToken(): string\n    {\n        const nextToken = this.tokens[this.line][this.token];\n        this.token++;\n\n        if(this.token >= this.tokens[this.line].length)\n        {\n            this.line++;\n            this.token = 0;\n        }\n\n        return nextToken;\n    }\n\n\n    readNumber(): number\n    {\n        return Number(this.readToken());\n    }\n\n    readLine(): string[]\n    {\n        const nextLine = [];\n        for(let i=this.token; i < this.tokens[this.line].length; i++)\n        {\n            nextLine.push(this.tokens[this.line][i]);\n        }\n\n        this.line++;\n        this.token = 0;\n\n        return nextLine;\n    }\n}", "import { Mesh } from '../geometry/3d/Mesh'\nimport { GfxApp } from '../core/GfxApp';\nimport { StringParser } from './StringParser';\n\nexport class ObjLoader\n{\n    static load(filename: string, mesh: Mesh | null = null, callback: ((loadedMesh: Mesh) => void) | null = null): Mesh\n    {\n        GfxApp.getInstance().assetManager.requestedAssets.push(filename);\n\n        if(!mesh)\n            mesh = new Mesh();\n\n        fetch(filename).then((response: Response) => {\n            if(!response.ok)\n                throw new Error();\n            return response.blob();\n        })\n        .then((data: Blob) => {\n            data.text().then((text: string) => {\n                ObjLoader.parse(text, mesh!);\n                GfxApp.getInstance().assetManager.loadedAssets.push(filename);\n                if(callback)\n                {\n                    callback(mesh!);\n                }\n            });\n        })\n        .catch(() => {\n            GfxApp.getInstance().assetManager.errorAssets.push(filename);\n            console.error('Unable to download file: ' + filename);\n        });\n\n        return mesh;\n    }\n\n    private static parse(obj: string, mesh: Mesh)\n    {\n        const parser = new StringParser(obj);\n        const vertices: number[] = [];\n        const colors: number[] = [];\n        const normals: number[] = [];\n        const indices: number[] = [];\n\n        while(!parser.done())\n        {\n            const nextToken = parser.readToken();\n\n            if(nextToken == 'v')\n                this.parseVertex(parser.readLine(), vertices, colors);\n            else if(nextToken == 'vn')\n                this.parseNormal(parser.readLine(), normals);\n            else if(nextToken == 'f')\n                this.parseFace(parser.readLine(), indices);\n            else\n                parser.consumeLine();\n        }\n\n        mesh.setVertices(vertices);\n        mesh.setColors(colors);\n        mesh.setNormals(normals);\n        mesh.setIndices(indices);\n\n        // If the file did not contain vertex colors, then assign a default color\n        if(colors.length == 0)\n            mesh.createDefaultVertexColors();\n    }\n\n    private static parseVertex(line: string[], vertices: number[], colors: number[])\n    {\n        vertices.push(Number(line[0]));\n        vertices.push(Number(line[1]));\n        vertices.push(Number(line[2]));\n\n        if(line.length == 6)\n        {\n            colors.push(Number(line[3]));\n            colors.push(Number(line[4]));\n            colors.push(Number(line[5]));\n            colors.push(1);\n        }\n    }\n\n    private static parseNormal(line: string[], normals: number[])\n    {\n        normals.push(Number(line[0]));\n        normals.push(Number(line[1]));\n        normals.push(Number(line[2]));\n    }\n\n    private static parseFace(line: string[], indices: number[])\n    {\n        for(let i=0; i < 3; i++)\n        {\n            const index = line[i].split('/');\n            indices.push(Number(index[0])-1);\n        }\n    }\n}", "import { GfxApp } from '../core/GfxApp';\n\nexport class Texture\n{\n    private static numTextures = 0;\n\n    protected readonly gl: WebGL2RenderingContext;\n\n    public texture: WebGLTexture | null;\n    public id: number;\n\n    constructor(url: string | null = null)\n    {\n        this.gl  = GfxApp.getInstance().renderer.gl;\n\n        this.texture = this.gl.createTexture();\n        this.id = Texture.numTextures;\n        Texture.numTextures++;\n\n        this.gl.activeTexture(this.gl.TEXTURE0 + this.id);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, \n            this.gl.UNSIGNED_BYTE, new Uint8Array([255, 0, 255, 255]));\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\n        \n        if(url)\n            this.load(url);\n    }\n\n    load(url: string): void\n    {\n        GfxApp.getInstance().assetManager.requestedAssets.push(url);\n\n        const image = new Image();\n        image.addEventListener('load', (event: Event)=>{ this.imageLoaded(image, url) }, false);\n        image.addEventListener('error', (event: Event)=>{ this.imageNotFound(url) }, false);\n        image.src = url;\n    }\n\n    imageLoaded(image: HTMLImageElement, url: string): void\n    {\n        GfxApp.getInstance().assetManager.loadedAssets.push(url);\n\n        this.gl.activeTexture(this.gl.TEXTURE0 + this.id);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, image);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n    }\n\n    imageNotFound(url: string): void\n    {\n        GfxApp.getInstance().assetManager.errorAssets.push(url);\n    }\n}", "// @ts-ignore\nimport wireframeVertexShader from '../shaders/wireframe.vert'\n// @ts-ignore\nimport wireframeFragmentShader from '../shaders/wireframe.frag'\n\nimport { Material3 } from './Material3';\nimport { ShaderProgram } from './ShaderProgram';\nimport { Mesh } from '../geometry/3d/Mesh';\nimport { Camera } from '../core/Camera';\nimport { Transform3 } from '../core/Transform3';\nimport { LightManager } from '../lights/LightManager';\nimport { Color } from '../math/Color';\nimport { Matrix4 } from '../math/Matrix4'\n\n\nexport class WireframeMaterial extends Material3\n{\n    private static shader = new ShaderProgram(wireframeVertexShader, wireframeFragmentShader);\n\n    public color: Color;\n\n    private wireframeBuffers: Map<Mesh, WebGLBuffer>;\n\n    private positionAttribute: number;\n    private modelViewUniform: WebGLUniformLocation | null;\n    private projectionUniform: WebGLUniformLocation | null;\n    private colorUniform: WebGLUniformLocation | null;\n\n    constructor()\n    {\n        super();\n\n        this.color = new Color(1, 1, 1, 1);\n        this.wireframeBuffers = new Map();\n\n        WireframeMaterial.shader.initialize(this.gl);\n        this.positionAttribute = WireframeMaterial.shader.getAttribute(this.gl, 'position');\n        this.modelViewUniform = WireframeMaterial.shader.getUniform(this.gl, 'modelViewMatrix');\n        this.projectionUniform = WireframeMaterial.shader.getUniform(this.gl, 'projectionMatrix');\n        this.colorUniform = WireframeMaterial.shader.getUniform(this.gl, 'color');\n    }\n\n    draw(mesh: Mesh, transform: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible || mesh.triangleCount == 0)\n            return;\n\n        this.initialize();\n            \n        // Switch to this shader\n        this.gl.useProgram(WireframeMaterial.shader.getProgram());\n\n        // Set the uniform matrices\n        this.gl.uniformMatrix4fv(this.modelViewUniform, false, Matrix4.multiply(transform.worldMatrix, camera.viewMatrix).mat);\n        this.gl.uniformMatrix4fv(this.projectionUniform, false, camera.projectionMatrix.mat);\n        this.gl.uniform4f(this.colorUniform, this.color.r, this.color.g, this.color.b, this.color.a);\n\n        // // Set the vertex positions\n        this.gl.enableVertexAttribArray(this.positionAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.positionBuffer);\n        this.gl.vertexAttribPointer(this.positionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n\n        if(!this.wireframeBuffers.get(mesh))\n        {\n            this.updateWireframeBuffer(mesh);\n        }\n\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.wireframeBuffers.get(mesh) as WebGLBuffer);\n        this.gl.drawElements(this.gl.LINES, mesh.triangleCount * 6, this.gl.UNSIGNED_SHORT, 0);\n    }\n\n    public updateWireframeBuffer(mesh: Mesh): void\n    {\n        let wireframeBuffer: WebGLBuffer | null | undefined;\n        wireframeBuffer = this.wireframeBuffers.get(mesh);\n\n        if(!wireframeBuffer)\n        {\n            wireframeBuffer = this.gl.createBuffer();\n            \n            if(wireframeBuffer)\n                this.wireframeBuffers.set(mesh, wireframeBuffer);\n        }\n\n        const indexArray = new Uint16Array(mesh.triangleCount * 3);\n        this.gl.bindBuffer(this.gl.COPY_READ_BUFFER, mesh.indexBuffer);\n        this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER, 0, indexArray);\n        const indices = [... indexArray];\n\n        const wireframeIndices: number[] = [];\n        for(let i=0; i < mesh.triangleCount; i++)\n        {\n            wireframeIndices.push(indices[i*3]);\n            wireframeIndices.push(indices[i*3+1]);\n\n            wireframeIndices.push(indices[i*3+1]);\n            wireframeIndices.push(indices[i*3+2]);\n\n            wireframeIndices.push(indices[i*3+2]);\n            wireframeIndices.push(indices[i*3]);\n        }\n\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, wireframeBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(wireframeIndices), this.gl.STATIC_DRAW);\n    }\n}", "// @ts-ignore\nimport unlitVertexShader from '../shaders/unlit.vert'\n// @ts-ignore\nimport unlitFragmentShader from '../shaders/unlit.frag'\n\nimport { Material3 } from './Material3';\nimport { ShaderProgram } from './ShaderProgram';\nimport { Mesh } from '../geometry/3d/Mesh';\nimport { Camera } from '../core/Camera';\nimport { Transform3 } from '../core/Transform3';\nimport { LightManager } from '../lights/LightManager';\nimport { Texture } from './Texture';\nimport { Color } from '../math/Color' \nimport { Matrix4 } from '../math/Matrix4'\n\nexport class UnlitMaterial extends Material3\n{\n    public texture: Texture | null;\n    public color: Color;\n\n    private static shader = new ShaderProgram(unlitVertexShader, unlitFragmentShader);\n    \n    private colorUniform: WebGLUniformLocation | null;\n    private textureUniform: WebGLUniformLocation | null;\n    private useTextureUniform: WebGLUniformLocation | null;\n\n    private modelViewUniform: WebGLUniformLocation | null;\n    private projectionUniform: WebGLUniformLocation | null;\n\n    private positionAttribute: number;\n    private colorAttribute: number;\n    private texCoordAttribute: number;\n\n    constructor()\n    {\n        super();\n\n        this.texture = null;\n        this.color = new Color(1, 1, 1);\n\n        UnlitMaterial.shader.initialize(this.gl);\n\n        this.colorUniform = UnlitMaterial.shader.getUniform(this.gl, 'color');\n        this.textureUniform = UnlitMaterial.shader.getUniform(this.gl, 'textureImage');\n        this.useTextureUniform = UnlitMaterial.shader.getUniform(this.gl, 'useTexture');\n\n        this.modelViewUniform = UnlitMaterial.shader.getUniform(this.gl, 'modelViewMatrix');\n        this.projectionUniform = UnlitMaterial.shader.getUniform(this.gl, 'projectionMatrix');\n\n        this.positionAttribute = UnlitMaterial.shader.getAttribute(this.gl, 'position');\n        this.colorAttribute = UnlitMaterial.shader.getAttribute(this.gl, 'color');\n        this.texCoordAttribute = UnlitMaterial.shader.getAttribute(this.gl, 'texCoord');   \n    }\n\n    draw(mesh: Mesh, transform: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(!this.visible || mesh.triangleCount == 0)\n            return;\n\n        this.initialize();\n\n        // Switch to this shader\n        this.gl.useProgram(UnlitMaterial.shader.getProgram());\n\n        // Set the camera uniforms\n        this.gl.uniformMatrix4fv(this.modelViewUniform, false, Matrix4.multiply(transform.worldMatrix, camera.viewMatrix).mat);\n        this.gl.uniformMatrix4fv(this.projectionUniform, false, camera.projectionMatrix.mat);\n\n        // Set the material property uniforms\n        this.gl.uniform4f(this.colorUniform, this.color.r, this.color.g, this.color.b, this.color.a);\n\n        // Set the vertex colors\n        this.gl.enableVertexAttribArray(this.colorAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.colorBuffer);\n        this.gl.vertexAttribPointer(this.colorAttribute, 4, this.gl.FLOAT, false, 0, 0);\n\n        // Set the vertex positions\n        this.gl.enableVertexAttribArray(this.positionAttribute);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.positionBuffer);\n        this.gl.vertexAttribPointer(this.positionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n\n        if(this.texture)\n        {\n            // Activate the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 1);\n\n            // Set the texture\n            this.gl.activeTexture(this.gl.TEXTURE0 + this.texture.id)\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture.texture);\n            this.gl.uniform1i(this.textureUniform, this.texture.id);\n\n            // Set the texture coordinates\n            this.gl.enableVertexAttribArray(this.texCoordAttribute);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, mesh.texCoordBuffer);\n            this.gl.vertexAttribPointer(this.texCoordAttribute, 2, this.gl.FLOAT, false, 0, 0);\n        }\n        else\n        {\n            // Disable the texture in the shader\n            this.gl.uniform1i(this.useTextureUniform, 0);\n        }\n\n        // Draw the triangles\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, mesh.indexBuffer);\n        this.gl.drawElements(this.gl.TRIANGLES, mesh.triangleCount*3, this.gl.UNSIGNED_SHORT, 0);\n    }\n}", "import { Material3 } from './Material3';\nimport { WireframeMaterial } from './WireframeMaterial'\nimport { Mesh } from '../geometry/3d/Mesh';\nimport { Camera } from '../core/Camera';\nimport { Transform3 } from '../core/Transform3'\nimport { LightManager } from '../lights/LightManager';\nimport { Vector3 } from '../math/Vector3' \nimport { Color } from '../math/Color' \nimport { SphereMesh } from '../geometry/3d/SphereMesh';\nimport { BoxMesh } from '../geometry/3d/BoxMesh';\n\nexport enum BoundingVolumeMode\n{\n    BOX,\n    SPHERE,\n    NONE\n}\n\nexport class BoundingVolumeMaterial extends Material3\n{\n    public mode: BoundingVolumeMode;\n    public wireframeMaterial: WireframeMaterial;\n\n    private sphere: SphereMesh;\n    private box: BoxMesh;\n    \n    constructor(mode = BoundingVolumeMode.BOX, color = new Color(1, 1, 1, 1))\n    {\n        super();\n\n        this.mode = mode;\n\n        this.sphere = new SphereMesh(1, 2);\n        this.box = new BoxMesh(1, 1, 1);\n\n        this.wireframeMaterial = new WireframeMaterial();\n        this.wireframeMaterial.color.copy(color);\n        this.sphere.material = this.wireframeMaterial;\n        this.box.material = this.wireframeMaterial;\n    }\n\n    draw(mesh: Mesh, transform: Transform3, camera: Camera, lightManager: LightManager): void\n    {\n        if(this.mode == BoundingVolumeMode.BOX)\n        {\n            const boxCenter = Vector3.add(mesh.boundingBox.min, mesh.boundingBox.max);\n            boxCenter.multiplyScalar(0.5);\n            this.box.position.copy(boxCenter);\n            this.box.scale.set(\n                mesh.boundingBox.max.x - mesh.boundingBox.min.x,\n                mesh.boundingBox.max.y - mesh.boundingBox.min.y,\n                mesh.boundingBox.max.z - mesh.boundingBox.min.z\n            );\n            this.box.parent = mesh;\n            this.box.computeWorldTransform();\n            this.box.draw(mesh, camera, lightManager);\n        }\n        else if(this.mode == BoundingVolumeMode.SPHERE)\n        {\n            this.sphere.position.copy(mesh.boundingSphere.center);\n            this.sphere.scale.set(mesh.boundingSphere.radius, mesh.boundingSphere.radius, mesh.boundingSphere.radius);\n            this.sphere.parent = mesh;\n            this.sphere.computeWorldTransform();\n            this.sphere.draw(mesh, camera, lightManager);\n        }\n    }\n}", "import { Vector3 } from \"./Vector3\"\n\nexport class Plane \n{\n    public point: Vector3;\n    public normal: Vector3;\n\n    constructor(point = new Vector3(), normal = new Vector3(0, 0, -1))\n    {\n        this.point = point;\n        this.normal = normal;\n    }\n}", "import { Vector3 } from './Vector3'\nimport { Plane } from './Plane'\nimport { BoundingBox3 } from './BoundingBox3'\nimport { BoundingSphere } from './BoundingSphere'\nimport { Vector2 } from './Vector2';\nimport { Camera } from '../core/Camera'\nimport { Mesh } from '../geometry/3d/Mesh'\nimport { Transform3 } from '../core/Transform3'\n\nexport class Ray \n{\n    public origin: Vector3;\n    public direction: Vector3;\n\n    constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1))\n    {\n        this.origin = origin;\n        this.direction = direction;\n    }\n    \n    set(origin: Vector3, direction: Vector3): void\n    {\n        this.origin = origin;\n        this.direction = direction;\n    }\n\n    setPickRay(deviceCoords: Vector2, camera: Camera): void\n    {\n        this.origin.copy(camera.worldPosition);\n        this.direction.set(deviceCoords.x, deviceCoords.y, -1);\n        this.direction.applyMatrix(camera.projectionMatrix.inverse());\n        this.direction.rotate(camera.worldRotation);\n        this.direction.normalize();\n    }\n\n    // Reference: https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-plane-and-ray-disk-intersection\n    intersectsPlane(plane: Plane): Vector3 | null\n    {\n\n        // This method assumes the normals are unit vectors\n        const denominator = this.direction.dot(plane.normal);\n\n        if(Math.abs(denominator) > 0.000001)\n        {\n            const rayOriginToPlanePoint = Vector3.subtract(plane.point, this.origin);\n            const t = rayOriginToPlanePoint.dot(plane.normal) / denominator;\n            \n            if(t > 0)\n            {\n                const intersectionPoint = Vector3.multiplyScalar(this.direction, t);\n                intersectionPoint.add(this.origin);\n                return intersectionPoint;\n            }\n        }\n        \n        return null;\n    }\n\n    // Reference: https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection\n    intersectsSphere(sphere: BoundingSphere): Vector3 | null\n    {\n\n        const l = Vector3.subtract(sphere.center, this.origin);\n        const tca = l.dot(this.direction);\n        const radiusSquared = sphere.radius * sphere.radius;\n\n        const d2 = l.dot(l) - tca * tca;\n        if(d2 > radiusSquared)\n            return null;\n\n        const thc = Math.sqrt(radiusSquared - d2);\n        const t0 = tca - thc;\n        const t1 = tca + thc;\n\n        if(t0 < 0 && t1 < 0)\n            return null;\n        \n        const intersection = this.direction.clone();\n\n        if(t0 < t1)\n            intersection.multiplyScalar(t0);\n        else\n            intersection.multiplyScalar(t1);\n        \n        intersection.add(this.origin);\n\n        return intersection;\n    }\n\n    // Reference: https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection\n    intersectsBox(box: BoundingBox3): Vector3 | null\n    {\n        let tmin = (box.min.x - this.origin.x) / this.direction.x; \n        let tmax = (box.max.x - this.origin.x) / this.direction.x; \n    \n        if (tmin > tmax)\n        {\n            const temp = tmin;\n            tmin = tmax;\n            tmax = temp;\n        } \n    \n        let tymin = (box.min.y - this.origin.y) / this.direction.y; \n        let tymax = (box.max.y - this.origin.y) / this.direction.y; \n    \n        if (tymin > tymax)\n        {\n            const temp = tymin;\n            tymin = tymax;\n            tymax = temp;\n        } \n    \n        if ((tmin > tymax) || (tymin > tmax)) \n            return null; \n    \n        if (tymin > tmin) \n            tmin = tymin; \n    \n        if (tymax < tmax) \n            tmax = tymax; \n    \n        let tzmin = (box.min.z - this.origin.z) / this.direction.z; \n        let tzmax = (box.max.z - this.origin.z) / this.direction.z; \n    \n        if (tzmin > tzmax) \n        {\n            const temp = tzmin;\n            tzmin = tzmax;\n            tzmax = temp;\n        } \n    \n        if ((tmin > tzmax) || (tzmin > tmax)) \n            return null; \n    \n        if (tzmin > tmin) \n            tmin = tzmin; \n    \n        if (tzmax < tmax) \n            tmax = tzmax; \n\n        const intersectionPoint = Vector3.multiplyScalar(this.direction, tmin);\n        intersectionPoint.add(this.origin);\n        return intersectionPoint;\n    }\n\n    intersectsMeshBoundingBox(mesh: Mesh): Vector3 | null\n    {\n        const localIntersection = this.createLocalRay(mesh).intersectsBox(mesh.boundingBox);\n        if(localIntersection)\n        {\n            localIntersection.multiply(mesh.worldScale);\n            localIntersection.rotate(mesh.worldRotation);\n            localIntersection.add(mesh.worldPosition);\n        }\n        return localIntersection;\n    }\n\n    intersectsMeshBoundingSphere(mesh: Mesh): Vector3 | null\n    {\n        const localIntersection = this.createLocalRay(mesh).intersectsSphere(mesh.boundingSphere);\n        if(localIntersection)\n        {\n            localIntersection.multiply(mesh.worldScale);\n            localIntersection.rotate(mesh.worldRotation);\n            localIntersection.add(mesh.worldPosition);\n        }\n\n        return localIntersection;\n    }\n\n    // Brute force intersection test\n    intersectsMesh(mesh: Mesh): Vector3 | null\n    { \n        // If we do not intersect the bounding box, then there is no\n        // need to load the vertices from GPU memory and conduct\n        // an intersection test with each triangle in the mesh.\n        if(!this.intersectsMeshBoundingBox(mesh))\n            return null;\n\n        const vertices = mesh.getVertices();\n        const indices = mesh.getIndices();\n\n        const localRay = this.createLocalRay(mesh);\n\n        const results = [];\n        for(let i=0; i < indices.length; i+=3)\n        {\n            const intersection = this.intersectsTriangle(localRay,\n                new Vector3(vertices[indices[i]*3], vertices[indices[i]*3+1], vertices[indices[i]*3+2]),\n                new Vector3(vertices[indices[i+1]*3], vertices[indices[i+1]*3+1], vertices[indices[i+1]*3+2]),\n                new Vector3(vertices[indices[i+2]*3], vertices[indices[i+2]*3+1], vertices[indices[i+2]*3+2])\n            );\n            if(intersection)\n            {\n                intersection.multiply(mesh.worldScale);\n                intersection.rotate(mesh.worldRotation);\n                intersection.add(mesh.worldPosition);\n                results.push(intersection);\n            }\n        }\n\n        if(results.length == 0)\n        {\n            return null;\n        }\n        else\n        {\n            let closestPoint = 0;\n            let closestDistance = this.origin.distanceTo(results[0]);\n            for(let i=1; i < results.length; i++)\n            {\n                const distance = this.origin.distanceTo(results[i]);\n                if(distance < closestDistance)\n                {\n                    closestPoint = i;\n                    closestDistance = distance;\n                }\n            }\n\n            return results[closestPoint];\n        }\n    }\n\n    // Implementation of the M\u00F6ller\u2013Trumbore intersection algorithm\n    // https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm\n    intersectsTriangle(ray: Ray, vertex0: Vector3, vertex1: Vector3, vertex2: Vector3): Vector3 | null\n    {\n        const EPSILON = 0.0000001;\n\n        const edge1 = Vector3.subtract(vertex1, vertex0);\n        const edge2 = Vector3.subtract(vertex2, vertex0);\n        const h = Vector3.cross(ray.direction, edge2);\n        const a = edge1.dot(h);\n    \n        if (a > -EPSILON && a < EPSILON) \n        {\n            // This ray is parallel to this triangle.\n            return null;    \n        }\n\n        const f = 1.0 / a;\n        const s = Vector3.subtract(ray.origin, vertex0);\n        const u = f * (s.dot(h));\n        if (u < 0.0 || u > 1.0)\n        {\n            return null;\n        }\n\n        const q = Vector3.cross(s, edge1);\n        const v = f * ray.direction.dot(q);\n        if (v < 0.0 || u + v > 1.0) \n        {\n            return null;\n        }\n\n        // At this stage we can compute t to find out where the intersection point is on the line.\n        const t = f * edge2.dot(q);\n\n        // ray intersection\n        if (t > EPSILON) \n        {\n            const intersection = ray.direction.clone();\n            intersection.multiplyScalar(t);\n            intersection.add(ray.origin);\n            return intersection;\n        }\n\n        return null;\n    }\n\n    createLocalRay(transform: Transform3): Ray\n    {\n        const localRay = new Ray(this.origin.clone(), this.direction.clone());\n\n        localRay.origin.subtract(transform.worldPosition);\n\n        const inverseRotation = transform.worldRotation.inverse();\n        localRay.origin.rotate(inverseRotation);\n        localRay.direction.rotate(inverseRotation);\n\n        const scale = transform.worldScale;\n        const inverseScale = new Vector3();\n        inverseScale.x = 1 / scale.x;\n        inverseScale.y = 1 / scale.y;\n        inverseScale.z = 1 / scale.z;\n        localRay.origin.multiply(inverseScale);\n        localRay.direction.multiply(inverseScale);\n        localRay.direction.normalize();\n        \n        return localRay;\n    } \n}"],
  "mappings": ";AAAO,IAAM,SAAN,MACP;AAAA,EAeI,YAAY,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GACrC;AACI,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AAAA,EACb;AAAA,EAEA,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAC7B;AACI,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AAAA,EACb;AAAA,EAEA,KAAK,OACL;AACI,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM;AAAA,EACnB;AACJ;AAvCO,IAAM,QAAN;AAAM,MAEc,QAAQ,IAAI,OAAM,GAAG,GAAG,CAAC;AAFvC,MAGc,QAAQ,IAAI,OAAM,GAAG,GAAG,CAAC;AAHvC,MAIc,MAAM,IAAI,OAAM,GAAG,GAAG,CAAC;AAJrC,MAKc,QAAQ,IAAI,OAAM,GAAG,GAAG,CAAC;AALvC,MAMc,OAAO,IAAI,OAAM,GAAG,GAAG,CAAC;AANtC,MAOc,SAAS,IAAI,OAAM,GAAG,GAAG,CAAC;AAPxC,MAQc,SAAS,IAAI,OAAM,GAAG,GAAG,CAAC;AARxC,MASc,OAAO,IAAI,OAAM,GAAG,GAAG,CAAC;;;ACP5C,IAAM,WAAN,MACP;AAAA,EAUI,OAAc,KAAK,GACnB;AACI,WAAO,IAAI,SAAQ,EAAE,GAAG,EAAE,CAAC;AAAA,EAC/B;AAAA,EAEA,OAAc,QAAQ,GACtB;AACI,WAAO,IAAI,SAAQ,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;AAAA,EACjC;AAAA,EAEA,OAAc,IAAI,IAAa,IAC/B;AACI,WAAO,IAAI,SAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AAAA,EAC/C;AAAA,EAEA,OAAc,SAAS,IAAa,IACpC;AACI,WAAO,IAAI,SAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AAAA,EAC/C;AAAA,EAEA,OAAc,SAAS,IAAa,IACpC;AACI,WAAO,IAAI,SAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AAAA,EAC/C;AAAA,EAEA,OAAc,OAAO,IAAa,IAClC;AACI,WAAO,IAAI,SAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AAAA,EAC/C;AAAA,EAEA,OAAc,eAAe,GAAY,GACzC;AACI,WAAO,IAAI,SAAQ,EAAE,IAAI,GAAG,EAAE,IAAI,CAAC;AAAA,EACvC;AAAA,EAEA,OAAc,aAAa,GAAY,GACvC;AACI,WAAO,IAAI,SAAQ,EAAE,IAAI,GAAG,EAAE,IAAI,CAAC;AAAA,EACvC;AAAA,EAEA,OAAc,gBAAgB,IAAa,IAC3C;AACI,WAAO,GAAG,WAAW,EAAE;AAAA,EAC3B;AAAA,EAEA,OAAc,aAAa,IAAa,IACxC;AACI,WAAO,GAAG,aAAa,EAAE;AAAA,EAC7B;AAAA,EAEA,OAAc,mBAAmB,IAAa,IAC9C;AACI,WAAO,GAAG,mBAAmB,EAAE;AAAA,EACnC;AAAA,EAEA,OAAc,IAAI,IAAa,IAC/B;AACI,WAAO,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG;AAAA,EAC/B;AAAA,EAEA,OAAc,UAAU,GACxB;AACI,UAAM,cAAc,EAAE,IAAE,EAAE,IAAI,EAAE,IAAE,EAAE;AAGpC,QAAG,cAAc;AACb,aAAO,IAAI,SAAQ;AAEvB,UAAM,cAAc,IAAI,KAAK,KAAK,WAAW;AAC7C,WAAO,IAAI,SAAQ,EAAE,IAAI,aAAa,EAAE,IAAI,WAAW;AAAA,EAC3D;AAAA,EAEA,OAAc,OAAO,GAAY,OACjC;AACI,WAAO,IAAI,SAAQ,KAAK,IAAI,KAAK,IAAE,EAAE,IAAI,KAAK,IAAI,KAAK,IAAE,EAAE,GAAG,KAAK,IAAI,KAAK,IAAE,EAAE,IAAI,KAAK,IAAI,KAAK,IAAE,EAAE,CAAC;AAAA,EAC3G;AAAA,EAKA,YAAY,IAAI,GAAG,IAAI,GACvB;AACI,SAAK,IAAI;AACT,SAAK,IAAI;AAAA,EACb;AAAA,EAEA,IAAI,GAAW,GACf;AACI,SAAK,IAAI;AACT,SAAK,IAAI;AAAA,EACb;AAAA,EAEA,KAAK,GACL;AACI,SAAK,IAAI,EAAE;AACX,SAAK,IAAI,EAAE;AAAA,EACf;AAAA,EAEA,QACA;AACI,WAAO,IAAI,SAAQ,KAAK,GAAG,KAAK,CAAC;AAAA,EACrC;AAAA,EAEA,OAAO,GACP;AACI,WAAO,KAAK,KAAK,EAAE,KAAK,KAAK,KAAK,EAAE;AAAA,EACxC;AAAA,EAEA,IAAI,GACJ;AACI,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AAAA,EAChB;AAAA,EAEA,SAAS,GACT;AACI,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AAAA,EAChB;AAAA,EAEA,SAAS,GACT;AACI,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AAAA,EAChB;AAAA,EAEA,OAAO,GACP;AACI,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AAAA,EAChB;AAAA,EAEA,eAAe,GACf;AACI,SAAK,KAAK;AACV,SAAK,KAAK;AAAA,EACd;AAAA,EAEA,aAAa,GACb;AACI,SAAK,KAAK;AACV,SAAK,KAAK;AAAA,EACd;AAAA,EAEA,WAAW,GACX;AACI,WAAO,KAAK;AAAA,OACP,KAAK,IAAI,EAAE,MAAM,KAAK,IAAI,EAAE,MAC5B,KAAK,IAAI,EAAE,MAAM,KAAK,IAAI,EAAE;AAAA,IACjC;AAAA,EACJ;AAAA,EAEA,sBAAsB,GACtB;AACI,SAAK,IAAI,EAAE,IAAI;AACf,SAAK,IAAI,EAAE,IAAI;AAAA,EACnB;AAAA,EAEA,mBAAmB,GACnB;AACI,SAAK,IAAI,KAAK,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE;AACxD,SAAK,IAAI,KAAK,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE;AAAA,EAC5D;AAAA,EAEA,YAAY,GACZ;AACI,UAAM,IAAI,KAAK,MAAM;AACrB,UAAM,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI;AACnD,SAAK,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI;AAClD,SAAK,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI;AAAA,EACtD;AAAA,EAEA,IAAI,GACJ;AACI,WAAO,KAAK,IAAE,EAAE,IAAI,KAAK,IAAE,EAAE;AAAA,EACjC;AAAA,EAEA,SACA;AACI,WAAO,KAAK,KAAK,KAAK,IAAE,KAAK,IAAI,KAAK,IAAE,KAAK,CAAC;AAAA,EAClD;AAAA,EAEA,YACA;AACI,UAAM,cAAc,KAAK,IAAE,KAAK,IAAI,KAAK,IAAE,KAAK;AAGhD,QAAG,cAAc;AACb;AAEJ,UAAM,cAAc,IAAI,KAAK,KAAK,WAAW;AAC7C,SAAK,KAAK;AACV,SAAK,KAAK;AAAA,EACd;AAAA,EAEA,SACA;AACI,SAAK,IAAI,CAAC,KAAK;AACf,SAAK,IAAI,CAAC,KAAK;AAAA,EACnB;AAAA,EAEA,aAAa,GACb;AACI,UAAM,SAAS,SAAQ,UAAU,IAAI;AACrC,UAAM,SAAS,SAAQ,UAAU,CAAC;AAElC,WAAO,KAAK,KAAK,OAAO,IAAI,MAAM,CAAC;AAAA,EACvC;AAAA,EAEA,mBAAmB,GACnB;AACI,UAAM,SAAS,SAAQ,UAAU,IAAI;AACrC,UAAM,SAAS,SAAQ,UAAU,CAAC;AAElC,WAAO,KAAK,MAAM,OAAO,GAAE,OAAO,CAAC,IAAI,KAAK,MAAM,OAAO,GAAG,OAAO,CAAC;AAAA,EACxE;AAAA,EAEA,OAAO,OACP;AACI,UAAM,IAAI,KAAK;AACf,UAAM,IAAI,KAAK;AACf,SAAK,IAAI,KAAK,IAAI,KAAK,IAAE,IAAI,KAAK,IAAI,KAAK,IAAE;AAC7C,SAAK,IAAI,KAAK,IAAI,KAAK,IAAE,IAAI,KAAK,IAAI,KAAK,IAAE;AAAA,EACjD;AACJ;AA3OO,IAAM,UAAN;AAAM,QAEc,OAAO,IAAI,SAAQ,GAAG,CAAC;AAFrC,QAGc,MAAM,IAAI,SAAQ,GAAG,CAAC;AAHpC,QAIc,KAAK,IAAI,SAAQ,GAAG,CAAC;AAJnC,QAKc,OAAO,IAAI,SAAQ,GAAG,EAAE;AALtC,QAMc,OAAO,IAAI,SAAQ,IAAI,CAAC;AANtC,QAOc,QAAQ,IAAI,SAAQ,GAAG,CAAC;AAPtC,QAQc,SAAS,SAAQ;AAR/B,QASc,SAAS,SAAQ;;;ACXrC,IAAM,YAAN,MACP;AAAA,EACI,OAAc,iBAAiB,SAC/B;AACI,WAAO,UAAU,KAAK,KAAK;AAAA,EAC/B;AAAA,EAEA,OAAc,iBAAiB,SAC/B;AACI,WAAO,UAAU,MAAM,KAAK;AAAA,EAChC;AAAA,EAEA,OAAc,QAAQ,OAAe,KAAa,KAAa,WAAmB,WAClF;AACI,WAAO,aAAa,YAAY,cAAc,QAAQ,QAAQ,MAAM;AAAA,EACxE;AAAA,EAEA,OAAc,MAAM,OAAe,KAAa,KAChD;AACI,WAAO,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,CAAC;AAAA,EAC7C;AACJ;;;ACfO,IAAK,WAAL,kBAAKA,cAAL;AAEH,EAAAA,oBAAA;AACA,EAAAA,oBAAA;AACA,EAAAA,oBAAA;AAJQ,SAAAA;AAAA,GAAA;AAOL,IAAM,WAAN,MACP;AAAA,EAOI,cACA;AACI,SAAK,YAAY,SAAS,eAAe,WAAW;AACpD,QAAG,CAAC,KAAK,WACT;AACI,YAAM,2BAA2B;AAAA,IACrC;AAEA,SAAK,UAAU,QAAQ,OAAO;AAC9B,SAAK,UAAU,SAAS,OAAO;AAK/B,UAAM,KAAK,KAAK,UAAU,WAAW,UAAU,EAAC,OAAO,MAAK,CAAC;AAC7D,QAAG,CAAC,IACJ;AACI,YAAM,yEAAyE;AAAA,IACnF;AACA,SAAK,KAAK;AAGV,OAAG,OAAO,GAAG,UAAU;AACvB,OAAG,UAAU,GAAG,MAAM;AAGtB,OAAG,OAAO,GAAG,SAAS;AACtB,OAAG,SAAS,GAAG,IAAI;AAGnB,OAAG,OAAO,KAAK,GAAG,KAAK;AACvB,OAAG,kBAAkB,GAAG,WAAW,GAAG,qBAAqB,GAAG,KAAK,GAAG,mBAAmB;AAEzF,SAAK,aAAa,IAAI,MAAM;AAC5B,SAAK,WAAW;AAAA,EACpB;AAAA,EAEA,OAAO,OAAe,QAAgB,aACtC;AACI,SAAK,UAAU,QAAQ;AACvB,SAAK,UAAU,SAAS;AAExB,QAAG,KAAK,YAAY,aACpB;AAEI,UAAG,cAAc,OAAO,aAAa,OAAO,aAC5C;AACI,aAAK,GAAG;AAAA,UACJ;AAAA,WACC,OAAO,cAAc,OAAO,aAAa,eAAe;AAAA,UACzD,OAAO;AAAA,UACP,OAAO,aAAa;AAAA,QACxB;AAAA,MACJ,OAEA;AACI,aAAK,GAAG;AAAA,WACH,OAAO,aAAa,OAAO,cAAc,eAAe;AAAA,UACzD;AAAA,UACA,OAAO,cAAc;AAAA,UACrB,OAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ,WACQ,KAAK,YAAY,cACzB;AAEI,UAAG,cAAc,OAAO,aAAa,OAAO,aAC5C;AACI,aAAK,GAAG;AAAA,WACH,OAAO,aAAa,OAAO,cAAc,eAAe;AAAA,UACzD;AAAA,UACA,OAAO,cAAc;AAAA,UACrB,OAAO;AAAA,QACX;AAAA,MACJ,OAEA;AACI,aAAK,GAAG;AAAA,UACJ;AAAA,WACC,OAAO,cAAc,OAAO,aAAa,eAAe;AAAA,UACzD,OAAO;AAAA,UACP,OAAO,aAAa;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ,OAEA;AAGI,WAAK,GAAG;AAAA,QACJ;AAAA,QACA;AAAA,QACA,OAAO;AAAA,QACP,OAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,OAAO,OAAc,QACrB;AACI,QAAG,OAAO,uBACV;AACI,WAAK,OAAO,KAAK,UAAU,OAAO,KAAK,UAAU,QAAQ,OAAO,eAAe,CAAC;AAChF,aAAO,wBAAwB;AAAA,IACnC;AAEA,SAAK,GAAG,WAAW,KAAK,WAAW,GAAG,KAAK,WAAW,GAAG,KAAK,WAAW,GAAG,KAAK,WAAW,CAAC;AAC7F,SAAK,GAAG,MAAM,KAAK,GAAG,mBAAmB,KAAK,GAAG,gBAAgB;AAEjE,UAAM,KAAK,MAAM;AAAA,EACrB;AAAA,EAEA,+BAA+B,QAAgB,QAC/C;AACI,UAAM,WAAW,KAAK,GAAG,aAAa,KAAK,GAAG,QAAQ;AACtD,WAAO,IAAI;AAAA,MACP,UAAU,OAAO,SAAS,SAAS,MAAM,SAAS,KAAK,IAAI,GAAG,IAAI,CAAC;AAAA,MACnE,UAAU,OAAO,SAAS,SAAS,MAAM,SAAS,KAAK,KAAK,GAAG,IAAI,CAAC;AAAA,IACxE;AAAA,EACJ;AACJ;;;AC3IO,IAAM,WAAN,MACP;AAAA,EAaI,OAAc,KAAK,GACnB;AACI,WAAO,IAAI,SAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AAAA,EACpC;AAAA,EAEA,OAAc,QAAQ,GACtB;AACI,WAAO,IAAI,SAAQ,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;AAAA,EACvC;AAAA,EAEA,OAAc,IAAI,IAAa,IAC/B;AACI,WAAO,IAAI,SAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AAAA,EAC5D;AAAA,EAEA,OAAc,SAAS,IAAa,IACpC;AACI,WAAO,IAAI,SAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AAAA,EAC5D;AAAA,EAEA,OAAc,SAAS,IAAa,IACpC;AACI,WAAO,IAAI,SAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AAAA,EAC5D;AAAA,EAEA,OAAc,OAAO,IAAa,IAClC;AACI,WAAO,IAAI,SAAQ,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC;AAAA,EAC5D;AAAA,EAGA,OAAc,IAAI,IAAa,IAC/B;AACI,WAAO,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG;AAAA,EAC3C;AAAA,EAEA,OAAc,MAAM,IAAa,IACjC;AACI,WAAO,IAAI;AAAA,MACP,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG;AAAA,MACxB,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG;AAAA,MACxB,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG;AAAA,IAC5B;AAAA,EACJ;AAAA,EAEA,OAAc,eAAe,GAAY,GACzC;AACI,WAAO,IAAI,SAAQ,EAAE,IAAI,GAAG,EAAE,IAAI,GAAG,EAAE,IAAI,CAAC;AAAA,EAChD;AAAA,EAEA,OAAc,aAAa,GAAY,GACvC;AACI,WAAO,IAAI,SAAQ,EAAE,IAAI,GAAG,EAAE,IAAI,GAAG,EAAE,IAAI,CAAC;AAAA,EAChD;AAAA,EAEA,OAAc,UAAU,GACxB;AACI,UAAM,cAAc,EAAE,IAAE,EAAE,IAAI,EAAE,IAAE,EAAE,IAAI,EAAE,IAAE,EAAE;AAG9C,QAAG,cAAc;AACb,aAAO,IAAI,SAAQ;AAEvB,UAAM,cAAc,IAAI,KAAK,KAAK,WAAW;AAC7C,WAAO,IAAI,SAAQ,EAAE,IAAI,aAAa,EAAE,IAAI,aAAa,EAAE,IAAI,WAAW;AAAA,EAC9E;AAAA,EAEA,OAAc,aAAa,IAAa,IACxC;AACI,WAAO,GAAG,aAAa,EAAE;AAAA,EAC7B;AAAA,EAEA,OAAc,gBAAgB,IAAa,IAC3C;AACI,WAAO,GAAG,WAAW,EAAE;AAAA,EAC3B;AAAA,EAMA,YAAY,IAAI,GAAG,IAAI,GAAG,IAAI,GAC9B;AACI,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AAAA,EACb;AAAA,EAEA,IAAI,GAAW,GAAW,GAC1B;AACI,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AAAA,EACb;AAAA,EAEA,KAAK,GACL;AACI,SAAK,IAAI,EAAE;AACX,SAAK,IAAI,EAAE;AACX,SAAK,IAAI,EAAE;AAAA,EACf;AAAA,EAEA,QACA;AACI,WAAO,IAAI,SAAQ,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;AAAA,EAC7C;AAAA,EAEA,OAAO,GACP;AACI,WAAO,KAAK,KAAK,EAAE,KAAK,KAAK,KAAK,EAAE,KAAK,KAAK,KAAK,EAAE;AAAA,EACzD;AAAA,EAEA,IAAI,GACJ;AACI,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AAAA,EAChB;AAAA,EAEA,SAAS,GACT;AACI,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AAAA,EAChB;AAAA,EAEA,SAAS,GACT;AACI,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AAAA,EAChB;AAAA,EAEA,OAAO,GACP;AACI,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AACZ,SAAK,KAAK,EAAE;AAAA,EAChB;AAAA,EAEA,IAAI,GACJ;AACI,WAAO,KAAK,IAAE,EAAE,IAAI,KAAK,IAAE,EAAE,IAAI,KAAK,IAAE,EAAE;AAAA,EAC9C;AAAA,EAEA,MAAM,GACN;AACI,WAAO,IAAI;AAAA,MACP,KAAK,IAAI,EAAE,IAAI,KAAK,IAAI,EAAE;AAAA,MAC1B,KAAK,IAAI,EAAE,IAAI,KAAK,IAAI,EAAE;AAAA,MAC1B,KAAK,IAAI,EAAE,IAAI,KAAK,IAAI,EAAE;AAAA,IAC9B;AAAA,EACJ;AAAA,EAEA,eAAe,GACf;AACI,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AAAA,EACd;AAAA,EAEA,aAAa,GACb;AACI,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AAAA,EACd;AAAA,EAEA,SACA;AACI,WAAO,KAAK,KAAK,KAAK,IAAE,KAAK,IAAI,KAAK,IAAE,KAAK,IAAI,KAAK,IAAE,KAAK,CAAC;AAAA,EAClE;AAAA,EAEA,YACA;AACI,UAAM,cAAc,KAAK,IAAE,KAAK,IAAI,KAAK,IAAE,KAAK,IAAI,KAAK,IAAE,KAAK;AAGhE,QAAG,cAAc;AACb;AAEJ,UAAM,cAAc,IAAI,KAAK,KAAK,WAAW;AAC7C,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AAAA,EACd;AAAA,EAEA,SACA;AACI,SAAK,IAAI,CAAC,KAAK;AACf,SAAK,IAAI,CAAC,KAAK;AACf,SAAK,IAAI,CAAC,KAAK;AAAA,EACnB;AAAA,EAEA,YAAY,GACZ;AACI,UAAM,IAAI,KAAK,MAAM;AACrB,UAAM,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,MAAI,EAAE,IAAI,EAAE,IAAI;AACnE,SAAK,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI;AACjE,SAAK,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI;AACjE,SAAK,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,MAAI,EAAE,IAAI,EAAE,IAAI;AAAA,EACtE;AAAA,EAEA,oBAAoB,GACpB;AACI,UAAM,IAAI,KAAK,MAAM;AACrB,UAAM,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,MAAI,EAAE;AACzD,SAAK,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE;AACvD,SAAK,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE;AACvD,SAAK,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE,IAAI,MAAI,EAAE;AAAA,EAC5D;AAAA,EAEA,OAAO,GACP;AACI,SAAK,KAAK,EAAE,OAAO,IAAI,CAAC;AAAA,EAC5B;AAAA,EAEA,aAAa,GACb;AACI,UAAM,SAAS,SAAQ,UAAU,IAAI;AACrC,UAAM,SAAS,SAAQ,UAAU,CAAC;AAElC,WAAO,KAAK,KAAK,OAAO,IAAI,MAAM,CAAC;AAAA,EACvC;AAAA,EAEA,WAAW,GACX;AACI,WAAO,KAAK;AAAA,OACP,KAAK,IAAI,EAAE,MAAM,KAAK,IAAI,EAAE,MAC5B,KAAK,IAAI,EAAE,MAAM,KAAK,IAAI,EAAE,MAC5B,KAAK,IAAI,EAAE,MAAM,KAAK,IAAI,EAAE;AAAA,IACjC;AAAA,EACJ;AAAA,EAEA,sBAAsB,GACtB;AACI,SAAK,IAAI,EAAE,IAAI;AACf,SAAK,IAAI,EAAE,IAAI;AACf,SAAK,IAAI,EAAE,IAAI;AAAA,EACnB;AAAA,EAEA,mBAAmB,GACnB;AACI,SAAK,IAAI,KAAK,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE;AAC5E,SAAK,IAAI,KAAK,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,EAAE;AAC5E,SAAK,IAAI,KAAK,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,KAAK,EAAE,IAAI,KAAG,EAAE,IAAI,KAAK,EAAE,IAAI,MAAI,EAAE,IAAI,GAAG;AAAA,EAClF;AACJ;AArQO,IAAM,UAAN;AAAM,QAEc,OAAO,IAAI,SAAQ,GAAG,GAAG,CAAC;AAFxC,QAGc,MAAM,IAAI,SAAQ,GAAG,GAAG,CAAC;AAHvC,QAIc,KAAK,IAAI,SAAQ,GAAG,GAAG,CAAC;AAJtC,QAKc,OAAO,IAAI,SAAQ,GAAG,IAAI,CAAC;AALzC,QAMc,OAAO,IAAI,SAAQ,IAAI,GAAG,CAAC;AANzC,QAOc,QAAQ,IAAI,SAAQ,GAAG,GAAG,CAAC;AAPzC,QAQc,UAAU,IAAI,SAAQ,GAAG,GAAG,EAAE;AAR5C,QASc,OAAO,IAAI,SAAQ,GAAG,GAAG,CAAC;AATxC,QAUc,SAAS,SAAQ;AAV/B,QAWc,SAAS,SAAQ;AAX/B,QAYc,SAAS,SAAQ;;;ACXrC,IAAM,cAAN,MACP;AAAA,EAGI,OAAc,SAAS,IAAgB,IACvC;AACI,UAAM,OAAO,IAAI,YAAW;AAE5B,SAAK,IAAI,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG;AACrD,SAAK,IAAI,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG;AACrD,SAAK,IAAI,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG;AACrD,SAAK,IAAI,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG,IAAI,GAAG,IAAE,GAAG;AAErD,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,UAAU,GACxB;AACI,UAAM,OAAO,EAAE,MAAM;AACrB,SAAK,UAAU;AACf,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,QAAQ,GACtB;AACI,UAAM,OAAO,EAAE,MAAM;AACrB,SAAK,OAAO;AACZ,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,cAAc,OAC5B;AACI,UAAM,OAAO,IAAI,YAAW;AAC5B,SAAK,aAAa,KAAK;AACvB,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,cAAc,OAC5B;AACI,UAAM,OAAO,IAAI,YAAW;AAC5B,SAAK,aAAa,KAAK;AACvB,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,cAAc,OAC5B;AACI,UAAM,OAAO,IAAI,YAAW;AAC5B,SAAK,aAAa,KAAK;AACvB,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,cAAc,MAAe,OAC3C;AACI,UAAM,OAAO,IAAI,YAAW;AAC5B,SAAK,aAAa,MAAM,KAAK;AAC7B,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,gBAAgB,KAAa,OAAe,MAC1D;AACI,UAAM,OAAO,IAAI,YAAW;AAC5B,SAAK,eAAe,KAAK,OAAO,IAAI;AACpC,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,WAAW,QACzB;AACI,UAAM,OAAO,IAAI,YAAW;AAC5B,SAAK,UAAU,MAAM;AACrB,WAAO;AAAA,EACX;AAAA,EAOA,YAAY,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GACrC;AACI,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AAAA,EACb;AAAA,EAEA,IAAI,GAAW,GAAW,GAAW,GACrC;AACI,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI;AAAA,EACb;AAAA,EAEA,aAAa,OACb;AACI,SAAK,IAAI,KAAK,IAAI,QAAQ,CAAC;AAC3B,SAAK,IAAI,KAAK,IAAI,QAAQ,CAAC;AAC3B,SAAK,IAAI;AACT,SAAK,IAAI;AAAA,EACb;AAAA,EAEA,aAAa,OACb;AACI,SAAK,IAAI,KAAK,IAAI,QAAQ,CAAC;AAC3B,SAAK,IAAI;AACT,SAAK,IAAI,KAAK,IAAI,QAAQ,CAAC;AAC3B,SAAK,IAAI;AAAA,EACb;AAAA,EAEA,aAAa,OACb;AACI,SAAK,IAAI,KAAK,IAAI,QAAQ,CAAC;AAC3B,SAAK,IAAI;AACT,SAAK,IAAI;AACT,SAAK,IAAI,KAAK,IAAI,QAAQ,CAAC;AAAA,EAC/B;AAAA,EAGA,aAAa,MAAe,OAC5B;AACI,UAAM,WAAW,KAAK,IAAI,QAAQ,CAAC;AAEnC,SAAK,IAAI,KAAK,IAAI,QAAQ,CAAC;AAC3B,SAAK,IAAI,WAAW,KAAK;AACzB,SAAK,IAAI,WAAW,KAAK;AACzB,SAAK,IAAI,WAAW,KAAK;AAAA,EAC7B;AAAA,EAEA,eAAe,KAAa,OAAe,MAC3C;AACI,UAAM,WAAW,KAAK,IAAI,QAAM,CAAC;AACjC,UAAM,WAAW,KAAK,IAAI,QAAM,CAAC;AAEjC,UAAM,SAAS,KAAK,IAAI,MAAI,CAAC;AAC7B,UAAM,SAAS,KAAK,IAAI,MAAI,CAAC;AAE7B,UAAM,UAAU,KAAK,IAAI,CAAC,OAAK,CAAC;AAChC,UAAM,UAAU,KAAK,IAAI,CAAC,OAAK,CAAC;AAEhC,SAAK,IAAI,WAAW,SAAS,UAAU,WAAW,SAAS;AAC3D,SAAK,IAAI,WAAW,SAAS,UAAU,WAAW,SAAS;AAC3D,SAAK,IAAI,WAAW,SAAS,UAAU,WAAW,SAAS;AAC3D,SAAK,IAAI,WAAW,SAAS,UAAU,WAAW,SAAS;AAAA,EAC/D;AAAA,EAGA,UAAU,QACV;AACI,SAAK,IAAI,KAAK,KAAK,IAAI,OAAO,IAAI,KAAK,OAAO,IAAI,KAAK,OAAO,IAAI,GAAG,IAAI;AACzE,SAAK,KAAK,OAAO,IAAI,KAAK,OAAO,IAAI,OAAO,IAAI,KAAK;AACrD,SAAK,KAAK,OAAO,IAAI,KAAK,OAAO,IAAI,OAAO,IAAI,KAAK;AACrD,SAAK,KAAK,OAAO,IAAI,KAAK,OAAO,IAAI,OAAO,IAAI,KAAK;AAAA,EACzD;AAAA,EAEA,KAAK,GACL;AACI,SAAK,IAAI,EAAE;AACX,SAAK,IAAI,EAAE;AACX,SAAK,IAAI,EAAE;AACX,SAAK,IAAI,EAAE;AAAA,EACf;AAAA,EAEA,QACA;AACI,WAAO,IAAI,YAAW,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;AAAA,EACxD;AAAA,EAIA,SAAS,GACT;AACI,SAAK,KAAK,YAAW,SAAS,GAAG,IAAI,CAAC;AAAA,EAC1C;AAAA,EAEA,YACA;AACI,UAAM,kBAAkB,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAClE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC;AAErC,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AACV,SAAK,KAAK;AAAA,EACd;AAAA,EAEA,OAAO,GACP;AAEI,UAAM,IAAI,IAAI,QAAQ,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;AAG5C,UAAM,SAAS,QAAQ,eAAe,GAAG,IAAI,EAAE,IAAI,CAAC,CAAC;AAGrD,WAAO,IAAI,QAAQ,eAAe,GAAG,KAAK,IAAI,KAAK,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAEhE,UAAM,UAAU,EAAE,MAAM,CAAC;AACzB,YAAQ,eAAe,IAAI,KAAK,CAAC;AACjC,WAAO,IAAI,OAAO;AAElB,WAAO;AAAA,EACX;AAAA,EAEA,SACA;AACI,UAAM,OAAO,KAAK,KAAK,IAAE,KAAK,IAAI,KAAK,IAAE,KAAK,IAAI,KAAK,IAAE,KAAK,IAAI,KAAK,IAAE,KAAK;AAC9E,SAAK,KAAK,CAAC;AACX,SAAK,KAAK,CAAC;AACX,SAAK,KAAK,CAAC;AACX,SAAK,KAAK;AAAA,EACd;AAAA,EAEA,UACA;AACI,WAAO,YAAW,QAAQ,IAAI;AAAA,EAClC;AAAA,EAGA,YACA;AACI,UAAM,MAAM,KAAK,IAAE,KAAK;AACxB,UAAM,MAAM,KAAK,IAAE,KAAK;AACxB,UAAM,MAAM,KAAK,IAAE,KAAK;AACxB,UAAM,MAAM,KAAK,IAAE,KAAK;AAGxB,UAAM,OAAO,KAAK,MAAM,MAAM,MAAM;AAEpC,UAAM,OAAO,KAAK,IAAE,KAAK;AACzB,UAAM,OAAO,KAAK,IAAE,KAAK;AACzB,UAAM,OAAO,KAAK,IAAE,KAAK;AACzB,UAAM,OAAO,KAAK,IAAE,KAAK;AACzB,UAAM,OAAO,KAAK,IAAE,KAAK;AACzB,UAAM,OAAO,KAAK,IAAE,KAAK;AAEzB,WAAO,QAAQ;AAAA,OACT,MAAM,MAAM,MAAM,OAAK;AAAA,MAAM,KAAK,OAAO,QAAM;AAAA,MAAM,KAAK,OAAO,QAAM;AAAA,MAAM;AAAA,MAC/E,KAAK,OAAO,QAAM;AAAA,OAAO,CAAC,MAAM,MAAM,MAAM,OAAK;AAAA,MAAM,KAAK,OAAO,QAAM;AAAA,MAAM;AAAA,MAC/E,KAAK,OAAO,QAAM;AAAA,MAAM,KAAK,OAAO,QAAM;AAAA,MAAO,CAAC,MAAM,MAAM,MAAM;AAAA,MAAM;AAAA,MAC1E;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,IACb;AAAA,EACJ;AACJ;AAlPO,IAAM,aAAN;AAAM,WAEc,WAAuB,IAAI,YAAW;;;ACH1D,IAAM,WAAN,MACP;AAAA,EAKI,OAAO,SAAS,IAAa,IAC7B;AACI,UAAM,IAAI,IAAI,SAAQ;AACtB,MAAE,IAAI,KAAK;AACX,MAAE,IAAI,KAAK;AACX,MAAE,IAAI,MAAM;AACZ,MAAE,IAAI,MAAM;AAEZ,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,YAAE,IAAI,IAAE,IAAE,MAAM,GAAG,IAAI,IAAE,IAAE,KAAK,GAAG,IAAI,IAAE,IAAE;AAAA,QAC/C;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,KAAK,GACZ;AACI,UAAM,MAAM,IAAI,SAAQ;AACxB,QAAI,KAAK,CAAC;AACV,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,aAAa,IAAY,IAAY,IAAY,IAC3D,IAAY,IAAY,IAAY,IACpC,IAAY,KAAa,KAAa,KACtC,KAAa,KAAa,KAAa,KAC3C;AACI,UAAM,SAAS,IAAI,SAAQ;AAC3B,WAAO,YAAY,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AACxF,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,gBAAgB,IAAY,IAAY,IAAY,IAC9D,IAAY,IAAY,IAAY,IACpC,IAAY,KAAa,KAAa,KACtC,KAAa,KAAa,KAAa,KAC3C;AACI,UAAM,SAAS,IAAI,SAAQ;AAC3B,WAAO,eAAe,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AAC3F,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,gBAAgB,GAC9B;AACI,WAAO,SAAQ;AAAA,MACX;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG,EAAE;AAAA,MACX;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG,EAAE;AAAA,MACX;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG,EAAE;AAAA,MACX;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,OAAc,cAAc,OAC5B;AACI,UAAM,SAAS,IAAI,SAAQ;AAC3B,WAAO,cAAc,KAAK;AAC1B,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,cAAc,OAC5B;AACI,UAAM,SAAS,IAAI,SAAQ;AAC3B,WAAO,cAAc,KAAK;AAC1B,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,cAAc,OAC5B;AACI,UAAM,SAAS,IAAI,SAAQ;AAC3B,WAAO,cAAc,KAAK;AAC1B,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,aAAa,MAAe,OAC1C;AACI,UAAM,SAAS,IAAI,SAAQ;AAC3B,WAAO,aAAa,MAAM,KAAK;AAC/B,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,UAAU,OACxB;AACI,UAAM,SAAS,IAAI,SAAQ;AAC3B,WAAO,UAAU,KAAK;AACtB,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,cAAc,WAAW,QAAQ,MAAM,WAAW,WAAW,UAAU,QAAQ,QAAQ,IACrG;AACI,UAAM,SAAS,IAAI,SAAQ;AAC3B,WAAO,cAAc,UAAU,UAAU,KAAK;AAC9C,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,OAAO,KAAc,QAAiB,IACpD;AACI,UAAM,SAAS,IAAI,SAAQ;AAC3B,WAAO,OAAO,KAAK,QAAQ,EAAE;AAC7B,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,iBAAiB,MAAc,OAAe,QAAgB,KAAa,MAAc,KACvG;AACI,UAAM,SAAS,IAAI,SAAQ;AAC3B,WAAO,iBAAiB,MAAM,OAAO,QAAQ,KAAK,MAAM,GAAG;AAC3D,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,gBAAgB,KAAa,aAAqB,MAAc,KAC9E;AACI,UAAM,SAAS,IAAI,SAAQ;AAC3B,WAAO,gBAAgB,KAAK,aAAa,MAAM,GAAG;AAClD,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,YAAY,MAAc,OAAe,QAAgB,KAAa,MAAc,KAClG;AACI,UAAM,SAAS,IAAI,SAAQ;AAC3B,WAAO,YAAY,MAAM,OAAO,QAAQ,KAAK,MAAM,GAAG;AACtD,WAAO;AAAA,EACX;AAAA,EAEA,cACA;AACI,SAAK,MAAM;AAAA,MACP;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACT;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACT;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACT;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,eAAe,IAAY,IAAY,IAAY,IAC/C,IAAY,IAAY,IAAY,IACpC,IAAY,KAAa,KAAa,KACtC,KAAa,KAAa,KAAa,KAC3C;AACI,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM;AAAA,EACnB;AAAA,EAEA,YAAY,IAAY,IAAY,IAAY,IAC5C,IAAY,IAAY,IAAY,IACpC,IAAY,KAAa,KAAa,KACtC,KAAa,KAAa,KAAa,KAC3C;AACI,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,KAAK;AACd,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM;AACf,SAAK,IAAI,MAAM;AAAA,EACnB;AAAA,EAEA,KAAK,GACL;AACI,aAAQ,IAAE,GAAG,IAAI,IAAI;AACjB,WAAK,IAAI,KAAK,EAAE,IAAI;AAAA,EAC5B;AAAA,EAEA,QACA;AACI,UAAM,SAAS,IAAI,SAAQ;AAE3B,aAAQ,IAAE,GAAG,IAAI,IAAI;AACjB,aAAO,IAAI,KAAK,KAAK,IAAI;AAE7B,WAAO;AAAA,EACX;AAAA,EAEA,QAAQ,KAAa,KACrB;AACI,WAAO,KAAK,IAAI,MAAI,IAAI;AAAA,EAC5B;AAAA,EAEA,IAAI,OAAe,KAAa,KAChC;AACG,SAAK,IAAI,MAAI,IAAI,OAAO;AAAA,EAC3B;AAAA,EAEA,SAAS,GACT;AACI,UAAM,OAAO,SAAQ,SAAS,GAAG,IAAI;AACrC,SAAK,KAAK,IAAI;AAAA,EAClB;AAAA,EAEA,gBAAgB,GAChB;AACI,SAAK;AAAA,MACD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG,EAAE;AAAA,MACX;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG,EAAE;AAAA,MACX;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG,EAAE;AAAA,MACX;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,cAAc,OACd;AACI,UAAM,WAAW,KAAK,IAAI,KAAK;AAC/B,UAAM,WAAW,KAAK,IAAI,KAAK;AAE/B,SAAK;AAAA,MACD;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACT;AAAA,MAAG;AAAA,MAAU,CAAC;AAAA,MAAU;AAAA,MACxB;AAAA,MAAG;AAAA,MAAU;AAAA,MAAU;AAAA,MACvB;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,cAAc,OACd;AACI,UAAM,WAAW,KAAK,IAAI,KAAK;AAC/B,UAAM,WAAW,KAAK,IAAI,KAAK;AAE/B,SAAK;AAAA,MACD;AAAA,MAAU;AAAA,MAAG;AAAA,MAAU;AAAA,MACvB;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACT,CAAC;AAAA,MAAU;AAAA,MAAG;AAAA,MAAU;AAAA,MACxB;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,cAAc,OACd;AACI,UAAM,WAAW,KAAK,IAAI,KAAK;AAC/B,UAAM,WAAW,KAAK,IAAI,KAAK;AAC/B,SAAK;AAAA,MACD;AAAA,MAAU,CAAC;AAAA,MAAU;AAAA,MAAG;AAAA,MACxB;AAAA,MAAU;AAAA,MAAU;AAAA,MAAG;AAAA,MACvB;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACT;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,aAAa,MAAe,OAC5B;AACI,UAAM,IAAI,KAAK,IAAI,KAAK;AAC9B,UAAM,IAAI,KAAK,IAAI,KAAK;AACxB,UAAM,IAAI,IAAI;AACd,UAAM,IAAI,KAAK,GAAG,IAAI,KAAK,GAAG,IAAI,KAAK;AACvC,UAAM,KAAK,IAAI,GAAG,KAAK,IAAI;AAC3B,SAAK;AAAA,MACJ,KAAK,IAAI;AAAA,MAAG,KAAK,IAAI,IAAI;AAAA,MAAG,KAAK,IAAI,IAAI;AAAA,MAAG;AAAA,MAC5C,KAAK,IAAI,IAAI;AAAA,MAAG,KAAK,IAAI;AAAA,MAAG,KAAK,IAAI,IAAI;AAAA,MAAG;AAAA,MAC5C,KAAK,IAAI,IAAI;AAAA,MAAG,KAAK,IAAI,IAAI;AAAA,MAAG,IAAI,IAAI,IAAI;AAAA,MAAG;AAAA,MAC/C;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,IACV;AAAA,EACE;AAAA,EAEA,UAAU,OACV;AACI,SAAK;AAAA,MACD,MAAM;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,MACf;AAAA,MAAG,MAAM;AAAA,MAAG;AAAA,MAAG;AAAA,MACf;AAAA,MAAG;AAAA,MAAG,MAAM;AAAA,MAAG;AAAA,MACf;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,iBACA;AACI,WAAO,IAAI,QAAQ,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,GAAG;AAAA,EAC/D;AAAA,EAEA,cACA;AACI,WAAO,WAAW,WAAW,IAAI;AAAA,EACrC;AAAA,EAEA,WACA;AACI,WAAO,IAAI;AAAA,MACP,KAAK,KAAK,KAAK,IAAI,KAAG,KAAK,IAAI,KAAK,KAAK,IAAI,KAAG,KAAK,IAAI,KAAK,KAAK,IAAI,KAAG,KAAK,IAAI,EAAE;AAAA,MACrF,KAAK,KAAK,KAAK,IAAI,KAAG,KAAK,IAAI,KAAK,KAAK,IAAI,KAAG,KAAK,IAAI,KAAK,KAAK,IAAI,KAAG,KAAK,IAAI,EAAE;AAAA,MACrF,KAAK,KAAK,KAAK,IAAI,KAAG,KAAK,IAAI,KAAK,KAAK,IAAI,KAAG,KAAK,IAAI,KAAK,KAAK,IAAI,MAAI,KAAK,IAAI,GAAG;AAAA,IAC3F;AAAA,EACJ;AAAA,EAEA,iBAAiB,MAAc,OAAe,QAAgB,KAAa,MAAc,KACzF;AACI,SAAK;AAAA,MACD,KAAG,QAAM;AAAA,MAAO;AAAA,MAAG;AAAA,MAAG,EAAE,QAAM,SAAO,QAAM;AAAA,MAC3C;AAAA,MAAG,KAAG,MAAI;AAAA,MAAS;AAAA,MAAG,EAAE,MAAI,WAAS,MAAI;AAAA,MACzC;AAAA,MAAG;AAAA,MAAG,MAAI,MAAI;AAAA,MAAO,EAAE,MAAI,SAAO,MAAI;AAAA,MACtC;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,gBAAgB,KAAa,aAAqB,MAAc,KAChE;AACI,UAAM,OAAO,OAAO,KAAK,IAAI,MAAM,KAAK,KAAK,GAAG;AAChD,UAAM,OAAO,OAAO;AACpB,SAAK,YAAY,CAAC,MAAM,MAAM,CAAC,MAAM,MAAM,MAAM,GAAG;AAAA,EACxD;AAAA,EAEA,YAAY,MAAc,OAAe,QAAgB,KAAa,MAAc,KACpF;AACI,SAAK;AAAA,MACD,IAAE,QAAM,QAAM;AAAA,MAAO;AAAA,OAAI,QAAM,SAAO,QAAM;AAAA,MAAO;AAAA,MACnD;AAAA,MAAG,IAAE,QAAM,MAAI;AAAA,OAAU,MAAI,WAAS,MAAI;AAAA,MAAS;AAAA,MACnD;AAAA,MAAG;AAAA,MAAG,EAAE,MAAI,SAAO,MAAI;AAAA,MAAO,KAAG,MAAI,QAAM,MAAI;AAAA,MAC/C;AAAA,MAAG;AAAA,MAAG;AAAA,MAAI;AAAA,IACd;AAAA,EACJ;AAAA,EAEA,cAAc,WAAW,QAAQ,MAAM,WAAW,WAAW,UAAU,QAAQ,QAAQ,KACvF;AACI,SAAK,gBAAgB,QAAQ;AAC7B,SAAK,SAAS,SAAS,UAAU,CAAC;AAClC,SAAK,SAAS,SAAQ,UAAU,KAAK,CAAC;AAAA,EAC1C;AAAA,EAEA,OAAO,KAAc,QAAiB,KAAK,QAAQ,IACnD;AACI,UAAM,IAAI,QAAQ,SAAS,KAAK,MAAM;AACtC,MAAE,UAAU;AAEZ,UAAM,IAAI,QAAQ,MAAM,IAAI,CAAC;AAC7B,MAAE,UAAU;AAEZ,UAAM,IAAI,QAAQ,MAAM,GAAG,CAAC;AAE5B,UAAM,WAAW,SAAQ;AAAA,MACrB,EAAE;AAAA,MAAG,EAAE;AAAA,MAAG,EAAE;AAAA,MAAG;AAAA,MACf,EAAE;AAAA,MAAG,EAAE;AAAA,MAAG,EAAE;AAAA,MAAG;AAAA,MACf,EAAE;AAAA,MAAG,EAAE;AAAA,MAAG,EAAE;AAAA,MAAG;AAAA,MACf;AAAA,MAAG;AAAA,MAAG;AAAA,MAAG;AAAA,IACb;AAEA,UAAM,cAAc,SAAQ,gBAAgB,GAAG;AAC/C,SAAK,KAAK,SAAQ,SAAS,UAAU,WAAW,CAAC;AAAA,EACrD;AAAA,EAEA,eAAe,GACf;AACI,aAAQ,IAAE,GAAG,IAAI,IAAI;AACjB,WAAK,IAAI,MAAM;AAAA,EACvB;AAAA,EAGA,cACA;AACI,UAAM,cACF,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MACnD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MACnD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MAAM,KAAK,IAAI,MACpD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MAAM,KAAK,IAAI,MACpD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MAAM,KAAK,IAAI,MACpD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MAAM,KAAK,IAAI,MACpD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MACnD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MACnD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MAAM,KAAK,IAAI,MACpD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MAAM,KAAK,IAAI,MACpD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MAAM,KAAK,IAAI,MACpD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MAAM,KAAK,IAAI,MACpD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MACnD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MACnD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MACnD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MACnD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MAAM,KAAK,IAAI,MACpD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MAAM,KAAK,IAAI,MACpD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MACnD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MACnD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MACnD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MACnD,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,MAAM,KAAK,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",
  "names": ["Viewport", "IntersectionMode2", "Side", "gouraud_default", "shape_default", "LightType", "wireframe_default", "unlit_default", "BoundingVolumeMode"]
}
